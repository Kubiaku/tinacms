(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[2],{

/***/ "../../.yarn/$$virtual/next-tinacms-cloudinary-virtual-3e265ebba5/1/packages/next-tinacms-cloudinary/dist/index.js":
/*!***********************************************************************************************************************************************!*\
  !*** /Users/jeffsee/code/tinacms/.yarn/$$virtual/next-tinacms-cloudinary-virtual-3e265ebba5/1/packages/next-tinacms-cloudinary/dist/index.js ***!
  \***********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function(global, factory) {\n   true ? factory(exports, __webpack_require__(/*! @tinacms/toolkit */ \"../../.yarn/$$virtual/@tinacms-toolkit-virtual-47b9737ef5/1/packages/@tinacms/toolkit/dist/index.js\")) : undefined;\n})(this, function(exports2, toolkit) {\n  \"use strict\";\n  const E_DEFAULT = new toolkit.MediaListError({\n    title: \"An Error Occurred\",\n    message: \"Something went wrong fetching your media from Cloudinary.\",\n    docsLink: \"https://tina.io/packages/next-tinacms-cloudinary\"\n  });\n  const E_UNAUTHORIZED = new toolkit.MediaListError({\n    title: \"Unauthorized\",\n    message: \"You don't have access to this resource.\",\n    docsLink: \"https://tina.io/packages/next-tinacms-cloudinary\"\n  });\n  const E_CONFIG = new toolkit.MediaListError({\n    title: \"Missing Credentials\",\n    message: \"Unable to connect to Cloudinary because one or more environment variables are missing.\",\n    docsLink: \"https://tina.io/packages/next-tinacms-cloudinary/#connect-with-cloudinary\"\n  });\n  const E_KEY_FAIL = new toolkit.MediaListError({\n    title: \"Bad Credentials\",\n    message: \"Unable to connect to Cloudinary because one or more environment variables are misconfigured.\",\n    docsLink: \"https://tina.io/packages/next-tinacms-cloudinary/#connect-with-cloudinary\"\n  });\n  const E_BAD_ROUTE = new toolkit.MediaListError({\n    title: \"Bad Route\",\n    message: \"The Cloudinary API route is missing or misconfigured.\",\n    docsLink: \"https://tina.io/packages/next-tinacms-cloudinary/#set-up-api-routes\"\n  });\n  const interpretErrorMessage = (message) => {\n    switch (message) {\n      case \"Must supply cloud_name\":\n      case \"Must supply api_key\":\n      case \"Must supply api_secret\":\n        return E_CONFIG;\n      case \"unknown api_key\":\n        return E_KEY_FAIL;\n      default:\n        return E_DEFAULT;\n    }\n  };\n  class CloudinaryMediaStore {\n    constructor() {\n      this.fetchFunction = (input, init) => {\n        return fetch(input, init);\n      };\n      this.accept = \"text/*,  application/*, image/*\";\n      this.previewSrc = (publicId) => {\n        if (typeof publicId === \"string\")\n          return publicId;\n        return publicId.previewSrc;\n      };\n      this.parse = (img) => {\n        return img.src;\n      };\n    }\n    async persist(media) {\n      let newFiles = [];\n      for (const item of media) {\n        const { file, directory } = item;\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        formData.append(\"directory\", directory);\n        formData.append(\"filename\", file.name);\n        const res = await this.fetchFunction(`/api/cloudinary/media`, {\n          method: \"POST\",\n          body: formData\n        });\n        if (res.status != 200) {\n          const responseData = await res.json();\n          throw new Error(responseData.message);\n        }\n        const fileRes = await res.json();\n        await new Promise((resolve) => {\n          setTimeout(resolve, 2e3);\n        });\n        const parsedRes = {\n          type: \"file\",\n          id: fileRes.public_id,\n          filename: fileRes.original_filename,\n          directory: \"/\",\n          previewSrc: fileRes.url\n        };\n        newFiles.push(parsedRes);\n      }\n      return newFiles;\n    }\n    async delete(media) {\n      await this.fetchFunction(`/api/cloudinary/media/${encodeURIComponent(media.id)}`, {\n        method: \"DELETE\"\n      });\n    }\n    async list(options) {\n      const query = this.buildQuery(options);\n      const response = await this.fetchFunction(\"/api/cloudinary/media\" + query);\n      if (response.status == 401) {\n        throw E_UNAUTHORIZED;\n      }\n      if (response.status == 404) {\n        throw E_BAD_ROUTE;\n      }\n      if (response.status >= 500) {\n        const { e } = await response.json();\n        const error = interpretErrorMessage(e);\n        throw error;\n      }\n      const { items, offset } = await response.json();\n      return {\n        items: items.map((item) => item),\n        nextOffset: offset\n      };\n    }\n    buildQuery(options) {\n      const params = Object.keys(options).filter((key) => options[key] !== \"\" && options[key] !== void 0).map((key) => `${key}=${options[key]}`).join(\"&\");\n      return `?${params}`;\n    }\n  }\n  class TinaCloudCloudinaryMediaStore extends CloudinaryMediaStore {\n    constructor(client) {\n      super();\n      this.client = client;\n      this.fetchFunction = async (input, init) => {\n        try {\n          const url = input.toString();\n          const query = `${url.includes(\"?\") ? \"&\" : \"?\"}clientID=${client.clientId}`;\n          const res = client.fetchWithToken(url + query, init);\n          return res;\n        } catch (error) {\n          console.error(error);\n        }\n      };\n    }\n  }\n  exports2.CloudinaryMediaStore = CloudinaryMediaStore;\n  exports2.TinaCloudCloudinaryMediaStore = TinaCloudCloudinaryMediaStore;\n  Object.defineProperty(exports2, \"__esModule\", { value: true });\n  exports2[Symbol.toStringTag] = \"Module\";\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../.yarn/$$virtual/next-tinacms-cloudinary-virtual-3e265ebba5/1/packages/next-tinacms-cloudinary/dist/index.js\n");

/***/ })

}]);