"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int, filter: DocumentFilter): DocumentConnection!
  getDocumentFields: JSON!
  getAuthorDocument(relativePath: String): AuthorDocument!
  getAuthorList(before: String, after: String, first: Int, last: Int, filter: AuthorFilter): AuthorConnection!
  getPostDocument(relativePath: String): PostDocument!
  getPostList(before: String, after: String, first: Int, last: Int, filter: PostFilter): PostConnection!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input AuthorSocialMediaFilter {
  platform: StringFilter
  handle: StringFilter
}

input AuthorFilter {
  name: StringFilter
  socialMedia: AuthorSocialMediaFilter
}

input PostAuthorFilter {
  author: AuthorFilter
}

input PostSomeFieldFilter {
  title: StringFilter
}

input PostBodyHeroSubTitleCtaActionsPopupFilter {
  title: StringFilter
  body: StringFilter
}

input PostBodyHeroSubTitleCtaActionsExternalLinkFilter {
  url: StringFilter
}

input PostBodyCtaActionsFilter {
  popup: PostBodyHeroSubTitleCtaActionsPopupFilter
  externalLink: PostBodyHeroSubTitleCtaActionsExternalLinkFilter
}

input PostBodyCtaFilter {
  title: StringFilter
  actions: PostBodyCtaActionsFilter
}

input PostBodyBlockQuoteFilter {
  author: StringFilter
  categories: StringFilter
}

input PostBodyHeroChildrenCtaActionsPopupFilter {
  title: StringFilter
  body: StringFilter
}

input PostBodyHeroChildrenCtaActionsExternalLinkFilter {
  url: StringFilter
}

input PostBodyHeroSubTitleCtaActionsFilter {
  popup: PostBodyHeroChildrenCtaActionsPopupFilter
  externalLink: PostBodyHeroChildrenCtaActionsExternalLinkFilter
}

input PostBodyHeroSubTitleCtaFilter {
  title: StringFilter
  actions: PostBodyHeroSubTitleCtaActionsFilter
}

input PostBodyHeroSubTitleFilter {
  Cta: PostBodyHeroSubTitleCtaFilter
}

input PostBodyHeroConfigFilter {
  variant: StringFilter
}

input PostBodyHeroChildrenCtaActionsFilter {
  popup: PostBodyHeroChildrenCtaActionsPopupFilter
  externalLink: PostBodyHeroChildrenCtaActionsExternalLinkFilter
}

input PostBodyHeroChildrenCtaFilter {
  title: StringFilter
  actions: PostBodyHeroChildrenCtaActionsFilter
}

input PostBodyHeroChildrenFilter {
  Cta: PostBodyHeroChildrenCtaFilter
}

input PostBodyHeroFilter {
  author: StringFilter
  subTitle: PostBodyHeroSubTitleFilter
  config: PostBodyHeroConfigFilter
  children: PostBodyHeroChildrenFilter
}

input PostBodyFilter {
  Cta: PostBodyCtaFilter
  BlockQuote: PostBodyBlockQuoteFilter
  Hero: PostBodyHeroFilter
}

input PostFilter {
  title: StringFilter
  author: PostAuthorFilter
  someField: PostSomeFieldFilter
  body: PostBodyFilter
}

input DocumentFilter {
  author: AuthorFilter
  post: PostFilter
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = AuthorDocument | PostDocument

type AuthorSocialMedia {
  platform: String
  handle: String
}

type Author {
  name: String
  socialMedia: [AuthorSocialMedia]
}

type AuthorDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Author!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type AuthorConnectionEdges {
  cursor: String
  node: AuthorDocument
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [AuthorConnectionEdges]
}

union PostAuthorDocument = AuthorDocument

type PostSomeField {
  title: String
}

type Post {
  title: String
  author: PostAuthorDocument
  someField: [PostSomeField]
  body: JSON
}

type PostDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Post!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostConnectionEdges {
  cursor: String
  node: PostDocument
}

type PostConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PostConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateAuthorDocument(relativePath: String!, params: AuthorMutation!): AuthorDocument!
  createAuthorDocument(relativePath: String!, params: AuthorMutation!): AuthorDocument!
  updatePostDocument(relativePath: String!, params: PostMutation!): PostDocument!
  createPostDocument(relativePath: String!, params: PostMutation!): PostDocument!
}

input DocumentMutation {
  author: AuthorMutation
  post: PostMutation
}

input AuthorSocialMediaMutation {
  platform: String
  handle: String
}

input AuthorMutation {
  name: String
  socialMedia: [AuthorSocialMediaMutation]
}

input PostSomeFieldMutation {
  title: String
}

input PostMutation {
  title: String
  author: String
  someField: [PostSomeFieldMutation]
  body: JSON
}
