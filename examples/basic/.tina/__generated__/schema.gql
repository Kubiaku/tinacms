# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  test(relativePath: String): Test!
  testConnection(before: String, after: String, first: Float, last: Float, sort: String): TestConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String): PageConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String): PostConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = TestTem1 | TestTem2 | Page | Post

type TestTem1 implements Node & Document {
  foo: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type TestTem2 implements Node & Document {
  bar: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Test = TestTem1 | TestTem2

type TestConnectionEdges {
  cursor: String!
  node: Test
}

type TestConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [TestConnectionEdges]
}

type Page implements Node & Document {
  Title: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

union PostPostsPost = Page | Post

type PostPosts {
  post: PostPostsPost
  label: String
}

type PostFoo {
  bar: String
}

type Post implements Node & Document {
  title: String
  posts: [PostPosts]
  foo: PostFoo
  topic: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateTest(relativePath: String!, params: TestMutation!): Test!
  createTest(relativePath: String!, params: TestMutation!): Test!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
}

input DocumentMutation {
  test: TestMutation
  page: PageMutation
  post: PostMutation
}

input TestTem1Mutation {
  foo: String
}

input TestTem2Mutation {
  bar: String
}

input TestMutation {
  tem1: TestTem1Mutation
  tem2: TestTem2Mutation
}

input PageMutation {
  Title: String
  body: JSON
}

input PostPostsMutation {
  post: String
  label: String
}

input PostFooMutation {
  bar: String
}

input PostMutation {
  title: String
  posts: [PostPostsMutation]
  foo: PostFooMutation
  topic: [String]
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
  