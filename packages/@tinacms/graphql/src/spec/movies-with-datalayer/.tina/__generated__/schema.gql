"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Float, last: Float, filter: DocumentFilter): DocumentConnection!
  getDocumentFields: JSON!
  getMovieDocument(relativePath: String): MovieDocument!
  getMovieList(before: String, after: String, first: Float, last: Float, filter: MovieFilter): MovieConnection!
  getDirectorDocument(relativePath: String): DirectorDocument!
  getDirectorList(before: String, after: String, first: Float, last: Float, filter: DirectorFilter): DirectorConnection!
  getCrewDocument(relativePath: String): CrewDocument!
  getCrewList(before: String, after: String, first: Float, last: Float, filter: CrewFilter): CrewConnection!
  getActorDocument(relativePath: String): ActorDocument!
  getActorList(before: String, after: String, first: Float, last: Float, filter: ActorFilter): ActorConnection!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input DirectorFilter {
  name: StringFilter
}

input MovieDirectorFilter {
  director: DirectorFilter
}

input MovieFilter {
  title: StringFilter
  releaseDate: DatetimeFilter
  rating: NumberFilter
  archived: BooleanFilter
  genre: StringFilter
  director: MovieDirectorFilter
  body: StringFilter
}

input CrewCostumeDesignerFilter {
  favoriteColor: StringFilter
}

input CrewStuntPersonFilter {
  bestMove: StringFilter
}

input CrewFilter {
  costumeDesigner: CrewCostumeDesignerFilter
  stuntPerson: CrewStuntPersonFilter
}

input ActorFilter {
  name: StringFilter
  body: StringFilter
}

input DocumentFilter {
  movie: MovieFilter
  director: DirectorFilter
  crew: CrewFilter
  actor: ActorFilter
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = MovieDocument | DirectorDocument | CrewDocument | ActorDocument

union MovieDirectorDocument = DirectorDocument

type Movie {
  title: String
  releaseDate: String
  rating: Float!
  archived: Boolean
  genre: String
  director: MovieDirectorDocument
  body: String
}

type MovieDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Movie!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type MovieConnectionEdges {
  cursor: String
  node: MovieDocument
}

type MovieConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [MovieConnectionEdges]
}

type Director {
  name: String
}

type DirectorDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Director!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type DirectorConnectionEdges {
  cursor: String
  node: DirectorDocument
}

type DirectorConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DirectorConnectionEdges]
}

type CrewCostumeDesigner {
  favoriteColor: String
}

type CrewStuntPerson {
  bestMove: String
}

union Crew = CrewCostumeDesigner | CrewStuntPerson

type CrewDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Crew!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type CrewConnectionEdges {
  cursor: String
  node: CrewDocument
}

type CrewConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [CrewConnectionEdges]
}

type Actor {
  name: String
  body: String
}

type ActorDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Actor!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ActorConnectionEdges {
  cursor: String
  node: ActorDocument
}

type ActorConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [ActorConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateMovieDocument(relativePath: String!, params: MovieMutation!): MovieDocument!
  createMovieDocument(relativePath: String!, params: MovieMutation!): MovieDocument!
  updateDirectorDocument(relativePath: String!, params: DirectorMutation!): DirectorDocument!
  createDirectorDocument(relativePath: String!, params: DirectorMutation!): DirectorDocument!
  updateCrewDocument(relativePath: String!, params: CrewMutation!): CrewDocument!
  createCrewDocument(relativePath: String!, params: CrewMutation!): CrewDocument!
  updateActorDocument(relativePath: String!, params: ActorMutation!): ActorDocument!
  createActorDocument(relativePath: String!, params: ActorMutation!): ActorDocument!
}

input DocumentMutation {
  movie: MovieMutation
  director: DirectorMutation
  crew: CrewMutation
  actor: ActorMutation
}

input MovieMutation {
  title: String
  releaseDate: String
  rating: Float
  archived: Boolean
  genre: String
  director: String
  body: String
}

input DirectorMutation {
  name: String
}

input CrewCostumeDesignerMutation {
  favoriteColor: String
}

input CrewStuntPersonMutation {
  bestMove: String
}

input CrewMutation {
  costumeDesigner: CrewCostumeDesignerMutation
  stuntPerson: CrewStuntPersonMutation
}

input ActorMutation {
  name: String
  body: String
}
