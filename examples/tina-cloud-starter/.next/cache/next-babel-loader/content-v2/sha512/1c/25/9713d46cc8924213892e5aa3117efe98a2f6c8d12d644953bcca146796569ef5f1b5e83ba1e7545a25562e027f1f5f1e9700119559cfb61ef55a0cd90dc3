{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jeffsee/code/tinacms/examples/tina-cloud-starter/pages/posts/[filename].tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Post } from \"../../components/post\";\nimport { ExperimentalGetTinaClient } from \"../../.tina/__generated__/types\"; // Use the props returned by get static props\n\nexport default function BlogPostPage(props) {\n  if (props.data && props.data.getPostsDocument) {\n    return /*#__PURE__*/_jsxDEV(Post, _objectSpread({}, props.data.getPostsDocument), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No data\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 10\n  }, this);\n}\nexport const getStaticProps = async ({\n  params\n}) => {\n  const client = ExperimentalGetTinaClient();\n  const tinaProps = await client.BlogPostQuery({\n    relativePath: `${params.filename}.mdx`\n  });\n  return {\n    props: _objectSpread({}, tinaProps)\n  };\n};\n/**\n * To build the blog post pages we just iterate through the list of\n * posts and provide their \"filename\" as part of the URL path\n *\n * So a blog post at \"content/posts/hello.md\" would\n * be viewable at http://localhost:3000/posts/hello\n */\n\nexport const getStaticPaths = async () => {\n  const client = ExperimentalGetTinaClient();\n  const postsListData = await client.getPostsList();\n  return {\n    paths: postsListData.data.getPostsList.edges.map(post => ({\n      params: {\n        filename: post.node.sys.filename\n      }\n    })),\n    fallback: true\n  };\n};","map":{"version":3,"sources":["/Users/jeffsee/code/tinacms/examples/tina-cloud-starter/pages/posts/[filename].tsx"],"names":["Post","ExperimentalGetTinaClient","BlogPostPage","props","data","getPostsDocument","getStaticProps","params","client","tinaProps","BlogPostQuery","relativePath","filename","getStaticPaths","postsListData","getPostsList","paths","edges","map","post","node","sys","fallback"],"mappings":";;;;;;;;;AAAA,SAASA,IAAT,QAAqB,uBAArB;AAEA,SAASC,yBAAT,QAA0C,iCAA1C,C,CAEA;;AACA,eAAe,SAASC,YAAT,CACbC,KADa,EAEb;AACA,MAAIA,KAAK,CAACC,IAAN,IAAcD,KAAK,CAACC,IAAN,CAAWC,gBAA7B,EAA+C;AAC7C,wBAAO,QAAC,IAAD,oBAAUF,KAAK,CAACC,IAAN,CAAWC,gBAArB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AAED,OAAO,MAAMC,cAAc,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAsB;AAClD,QAAMC,MAAM,GAAGP,yBAAyB,EAAxC;AACA,QAAMQ,SAAS,GAAG,MAAMD,MAAM,CAACE,aAAP,CAAqB;AAC3CC,IAAAA,YAAY,EAAG,GAAEJ,MAAM,CAACK,QAAS;AADU,GAArB,CAAxB;AAGA,SAAO;AACLT,IAAAA,KAAK,oBACAM,SADA;AADA,GAAP;AAKD,CAVM;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,cAAc,GAAG,YAAY;AACxC,QAAML,MAAM,GAAGP,yBAAyB,EAAxC;AACA,QAAMa,aAAa,GAAG,MAAMN,MAAM,CAACO,YAAP,EAA5B;AACA,SAAO;AACLC,IAAAA,KAAK,EAAEF,aAAa,CAACV,IAAd,CAAmBW,YAAnB,CAAgCE,KAAhC,CAAsCC,GAAtC,CAA2CC,IAAD,KAAW;AAC1DZ,MAAAA,MAAM,EAAE;AAAEK,QAAAA,QAAQ,EAAEO,IAAI,CAACC,IAAL,CAAUC,GAAV,CAAcT;AAA1B;AADkD,KAAX,CAA1C,CADF;AAILU,IAAAA,QAAQ,EAAE;AAJL,GAAP;AAMD,CATM","sourcesContent":["import { Post } from \"../../components/post\";\nimport { getStaticPropsForTina, staticRequest } from \"tinacms\";\nimport { ExperimentalGetTinaClient } from \"../../.tina/__generated__/types\";\n\n// Use the props returned by get static props\nexport default function BlogPostPage(\n  props: AsyncReturnType<typeof getStaticProps>[\"props\"]\n) {\n  if (props.data && props.data.getPostsDocument) {\n    return <Post {...props.data.getPostsDocument} />;\n  }\n  return <div>No data</div>;\n}\n\nexport const getStaticProps = async ({ params }) => {\n  const client = ExperimentalGetTinaClient();\n  const tinaProps = await client.BlogPostQuery({\n    relativePath: `${params.filename}.mdx`,\n  });\n  return {\n    props: {\n      ...tinaProps,\n    },\n  };\n};\n\n/**\n * To build the blog post pages we just iterate through the list of\n * posts and provide their \"filename\" as part of the URL path\n *\n * So a blog post at \"content/posts/hello.md\" would\n * be viewable at http://localhost:3000/posts/hello\n */\nexport const getStaticPaths = async () => {\n  const client = ExperimentalGetTinaClient();\n  const postsListData = await client.getPostsList();\n  return {\n    paths: postsListData.data.getPostsList.edges.map((post) => ({\n      params: { filename: post.node.sys.filename },\n    })),\n    fallback: true,\n  };\n};\n\nexport type AsyncReturnType<T extends (...args: any) => Promise<any>> =\n  T extends (...args: any) => Promise<infer R> ? R : any;\n"]},"metadata":{},"sourceType":"module"}