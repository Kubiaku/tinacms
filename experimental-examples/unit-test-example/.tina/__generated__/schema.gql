# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getDocumentFields: JSON!
  getPageDocument(relativePath: String): PageDocument!
  getPageList(before: String, after: String, first: Int, last: Int): PageConnection!
  getBlockPageDocument(relativePath: String): BlockPageDocument!
  getBlockPageList(before: String, after: String, first: Int, last: Int): BlockPageConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = PageDocument | BlockPageDocument

union PageRelatedPageDocument = BlockPageDocument

type Page {
  title: String
  body: String
  relatedPage: PageRelatedPageDocument
}

type PageDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Page!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PageConnectionEdges {
  cursor: String
  node: PageDocument
}

type PageConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PageConnectionEdges]
}

type BlockPageSeo {
  ogTitle: String
}

union BlockPageSocialRelatedPageDocument = PageDocument

type BlockPageSocial {
  handle: String
  platform: String
  relatedPage: BlockPageSocialRelatedPageDocument
}

union BlockPageRelatedPageDocument = PageDocument

union BlockPageBlocksHeroRelationDocument = PageDocument

type BlockPageBlocksHero {
  title: String
  description: String
  relation: BlockPageBlocksHeroRelationDocument
}

type BlockPageBlocksCta {
  title: String
  action: String
}

union BlockPageBlocks = BlockPageBlocksHero | BlockPageBlocksCta

type BlockPage {
  title: String
  seo: BlockPageSeo
  social: [BlockPageSocial]
  relatedPage: BlockPageRelatedPageDocument
  blocks: [BlockPageBlocks]
}

type BlockPageDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: BlockPage!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type BlockPageConnectionEdges {
  cursor: String
  node: BlockPageDocument
}

type BlockPageConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [BlockPageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePageDocument(relativePath: String!, params: PageMutation!): PageDocument!
  createPageDocument(relativePath: String!, params: PageMutation!): PageDocument!
  updateBlockPageDocument(relativePath: String!, params: BlockPageMutation!): BlockPageDocument!
  createBlockPageDocument(relativePath: String!, params: BlockPageMutation!): BlockPageDocument!
}

input DocumentMutation {
  page: PageMutation
  blockPage: BlockPageMutation
}

input PageMutation {
  title: String
  body: String
  relatedPage: String
}

input BlockPageSeoMutation {
  ogTitle: String
}

input BlockPageSocialMutation {
  handle: String
  platform: String
  relatedPage: String
}

input BlockPageBlocksHeroMutation {
  title: String
  description: String
  relation: String
}

input BlockPageBlocksCtaMutation {
  title: String
  action: String
}

input BlockPageBlocksMutation {
  hero: BlockPageBlocksHeroMutation
  cta: BlockPageBlocksCtaMutation
}

input BlockPageMutation {
  title: String
  seo: BlockPageSeoMutation
  social: [BlockPageSocialMutation]
  relatedPage: String
  blocks: [BlockPageBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  