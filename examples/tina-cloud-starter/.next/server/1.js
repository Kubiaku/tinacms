exports.ids = [1];
exports.modules = {

/***/ "../../.yarn/$$virtual/next-tinacms-cloudinary-virtual-3e265ebba5/1/packages/next-tinacms-cloudinary/dist/index.js":
/*!***********************************************************************************************************************************************!*\
  !*** /Users/jeffsee/code/tinacms/.yarn/$$virtual/next-tinacms-cloudinary-virtual-3e265ebba5/1/packages/next-tinacms-cloudinary/dist/index.js ***!
  \***********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function(global, factory) {\n   true ? factory(exports, __webpack_require__(/*! @tinacms/toolkit */ \"../../.yarn/$$virtual/@tinacms-toolkit-virtual-47b9737ef5/1/packages/@tinacms/toolkit/dist/index.js\")) : undefined;\n})(this, function(exports2, toolkit) {\n  \"use strict\";\n  const E_DEFAULT = new toolkit.MediaListError({\n    title: \"An Error Occurred\",\n    message: \"Something went wrong fetching your media from Cloudinary.\",\n    docsLink: \"https://tina.io/packages/next-tinacms-cloudinary\"\n  });\n  const E_UNAUTHORIZED = new toolkit.MediaListError({\n    title: \"Unauthorized\",\n    message: \"You don't have access to this resource.\",\n    docsLink: \"https://tina.io/packages/next-tinacms-cloudinary\"\n  });\n  const E_CONFIG = new toolkit.MediaListError({\n    title: \"Missing Credentials\",\n    message: \"Unable to connect to Cloudinary because one or more environment variables are missing.\",\n    docsLink: \"https://tina.io/packages/next-tinacms-cloudinary/#connect-with-cloudinary\"\n  });\n  const E_KEY_FAIL = new toolkit.MediaListError({\n    title: \"Bad Credentials\",\n    message: \"Unable to connect to Cloudinary because one or more environment variables are misconfigured.\",\n    docsLink: \"https://tina.io/packages/next-tinacms-cloudinary/#connect-with-cloudinary\"\n  });\n  const E_BAD_ROUTE = new toolkit.MediaListError({\n    title: \"Bad Route\",\n    message: \"The Cloudinary API route is missing or misconfigured.\",\n    docsLink: \"https://tina.io/packages/next-tinacms-cloudinary/#set-up-api-routes\"\n  });\n  const interpretErrorMessage = (message) => {\n    switch (message) {\n      case \"Must supply cloud_name\":\n      case \"Must supply api_key\":\n      case \"Must supply api_secret\":\n        return E_CONFIG;\n      case \"unknown api_key\":\n        return E_KEY_FAIL;\n      default:\n        return E_DEFAULT;\n    }\n  };\n  class CloudinaryMediaStore {\n    constructor() {\n      this.fetchFunction = (input, init) => {\n        return fetch(input, init);\n      };\n      this.accept = \"text/*,  application/*, image/*\";\n      this.previewSrc = (publicId) => {\n        if (typeof publicId === \"string\")\n          return publicId;\n        return publicId.previewSrc;\n      };\n      this.parse = (img) => {\n        return img.src;\n      };\n    }\n    async persist(media) {\n      let newFiles = [];\n      for (const item of media) {\n        const { file, directory } = item;\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        formData.append(\"directory\", directory);\n        formData.append(\"filename\", file.name);\n        const res = await this.fetchFunction(`/api/cloudinary/media`, {\n          method: \"POST\",\n          body: formData\n        });\n        if (res.status != 200) {\n          const responseData = await res.json();\n          throw new Error(responseData.message);\n        }\n        const fileRes = await res.json();\n        await new Promise((resolve) => {\n          setTimeout(resolve, 2e3);\n        });\n        const parsedRes = {\n          type: \"file\",\n          id: fileRes.public_id,\n          filename: fileRes.original_filename,\n          directory: \"/\",\n          previewSrc: fileRes.url\n        };\n        newFiles.push(parsedRes);\n      }\n      return newFiles;\n    }\n    async delete(media) {\n      await this.fetchFunction(`/api/cloudinary/media/${encodeURIComponent(media.id)}`, {\n        method: \"DELETE\"\n      });\n    }\n    async list(options) {\n      const query = this.buildQuery(options);\n      const response = await this.fetchFunction(\"/api/cloudinary/media\" + query);\n      if (response.status == 401) {\n        throw E_UNAUTHORIZED;\n      }\n      if (response.status == 404) {\n        throw E_BAD_ROUTE;\n      }\n      if (response.status >= 500) {\n        const { e } = await response.json();\n        const error = interpretErrorMessage(e);\n        throw error;\n      }\n      const { items, offset } = await response.json();\n      return {\n        items: items.map((item) => item),\n        nextOffset: offset\n      };\n    }\n    buildQuery(options) {\n      const params = Object.keys(options).filter((key) => options[key] !== \"\" && options[key] !== void 0).map((key) => `${key}=${options[key]}`).join(\"&\");\n      return `?${params}`;\n    }\n  }\n  class TinaCloudCloudinaryMediaStore extends CloudinaryMediaStore {\n    constructor(client) {\n      super();\n      this.client = client;\n      this.fetchFunction = async (input, init) => {\n        try {\n          const url = input.toString();\n          const query = `${url.includes(\"?\") ? \"&\" : \"?\"}clientID=${client.clientId}`;\n          const res = client.fetchWithToken(url + query, init);\n          return res;\n        } catch (error) {\n          console.error(error);\n        }\n      };\n    }\n  }\n  exports2.CloudinaryMediaStore = CloudinaryMediaStore;\n  exports2.TinaCloudCloudinaryMediaStore = TinaCloudCloudinaryMediaStore;\n  Object.defineProperty(exports2, \"__esModule\", { value: true });\n  exports2[Symbol.toStringTag] = \"Module\";\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL2plZmZzZWUvY29kZS90aW5hY21zLy55YXJuLyR2aXJ0dWFsL25leHQtdGluYWNtcy1jbG91ZGluYXJ5LXZpcnR1YWwtM2UyNjVlYmJhNS8xL3BhY2thZ2VzL25leHQtdGluYWNtcy1jbG91ZGluYXJ5L2Rpc3QvaW5kZXguanM/ZGVhOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLEVBQUUsS0FBNEQsb0JBQW9CLG1CQUFPLENBQUMsNkhBQWtCLEtBQUssU0FBd087QUFDelYsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxrQkFBa0I7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELDZCQUE2QjtBQUNyRjtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxJQUFJO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0JBQWdCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBIQUEwSCxJQUFJLEdBQUcsYUFBYTtBQUM5SSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsOEJBQThCLFdBQVcsZ0JBQWdCO0FBQ3BGO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsY0FBYztBQUMvRDtBQUNBLENBQUMiLCJmaWxlIjoiLi4vLi4vLnlhcm4vJCR2aXJ0dWFsL25leHQtdGluYWNtcy1jbG91ZGluYXJ5LXZpcnR1YWwtM2UyNjVlYmJhNS8xL3BhY2thZ2VzL25leHQtdGluYWNtcy1jbG91ZGluYXJ5L2Rpc3QvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgIT09IFwidW5kZWZpbmVkXCIgPyBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoXCJAdGluYWNtcy90b29sa2l0XCIpKSA6IHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFtcImV4cG9ydHNcIiwgXCJAdGluYWNtcy90b29sa2l0XCJdLCBmYWN0b3J5KSA6IChnbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZmFjdG9yeShnbG9iYWxbXCJuZXh0LXRpbmFjbXMtY2xvdWRpbmFyeVwiXSA9IHt9LCBnbG9iYWwuTk9PUCkpO1xufSkodGhpcywgZnVuY3Rpb24oZXhwb3J0czIsIHRvb2xraXQpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIGNvbnN0IEVfREVGQVVMVCA9IG5ldyB0b29sa2l0Lk1lZGlhTGlzdEVycm9yKHtcbiAgICB0aXRsZTogXCJBbiBFcnJvciBPY2N1cnJlZFwiLFxuICAgIG1lc3NhZ2U6IFwiU29tZXRoaW5nIHdlbnQgd3JvbmcgZmV0Y2hpbmcgeW91ciBtZWRpYSBmcm9tIENsb3VkaW5hcnkuXCIsXG4gICAgZG9jc0xpbms6IFwiaHR0cHM6Ly90aW5hLmlvL3BhY2thZ2VzL25leHQtdGluYWNtcy1jbG91ZGluYXJ5XCJcbiAgfSk7XG4gIGNvbnN0IEVfVU5BVVRIT1JJWkVEID0gbmV3IHRvb2xraXQuTWVkaWFMaXN0RXJyb3Ioe1xuICAgIHRpdGxlOiBcIlVuYXV0aG9yaXplZFwiLFxuICAgIG1lc3NhZ2U6IFwiWW91IGRvbid0IGhhdmUgYWNjZXNzIHRvIHRoaXMgcmVzb3VyY2UuXCIsXG4gICAgZG9jc0xpbms6IFwiaHR0cHM6Ly90aW5hLmlvL3BhY2thZ2VzL25leHQtdGluYWNtcy1jbG91ZGluYXJ5XCJcbiAgfSk7XG4gIGNvbnN0IEVfQ09ORklHID0gbmV3IHRvb2xraXQuTWVkaWFMaXN0RXJyb3Ioe1xuICAgIHRpdGxlOiBcIk1pc3NpbmcgQ3JlZGVudGlhbHNcIixcbiAgICBtZXNzYWdlOiBcIlVuYWJsZSB0byBjb25uZWN0IHRvIENsb3VkaW5hcnkgYmVjYXVzZSBvbmUgb3IgbW9yZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgYXJlIG1pc3NpbmcuXCIsXG4gICAgZG9jc0xpbms6IFwiaHR0cHM6Ly90aW5hLmlvL3BhY2thZ2VzL25leHQtdGluYWNtcy1jbG91ZGluYXJ5LyNjb25uZWN0LXdpdGgtY2xvdWRpbmFyeVwiXG4gIH0pO1xuICBjb25zdCBFX0tFWV9GQUlMID0gbmV3IHRvb2xraXQuTWVkaWFMaXN0RXJyb3Ioe1xuICAgIHRpdGxlOiBcIkJhZCBDcmVkZW50aWFsc1wiLFxuICAgIG1lc3NhZ2U6IFwiVW5hYmxlIHRvIGNvbm5lY3QgdG8gQ2xvdWRpbmFyeSBiZWNhdXNlIG9uZSBvciBtb3JlIGVudmlyb25tZW50IHZhcmlhYmxlcyBhcmUgbWlzY29uZmlndXJlZC5cIixcbiAgICBkb2NzTGluazogXCJodHRwczovL3RpbmEuaW8vcGFja2FnZXMvbmV4dC10aW5hY21zLWNsb3VkaW5hcnkvI2Nvbm5lY3Qtd2l0aC1jbG91ZGluYXJ5XCJcbiAgfSk7XG4gIGNvbnN0IEVfQkFEX1JPVVRFID0gbmV3IHRvb2xraXQuTWVkaWFMaXN0RXJyb3Ioe1xuICAgIHRpdGxlOiBcIkJhZCBSb3V0ZVwiLFxuICAgIG1lc3NhZ2U6IFwiVGhlIENsb3VkaW5hcnkgQVBJIHJvdXRlIGlzIG1pc3Npbmcgb3IgbWlzY29uZmlndXJlZC5cIixcbiAgICBkb2NzTGluazogXCJodHRwczovL3RpbmEuaW8vcGFja2FnZXMvbmV4dC10aW5hY21zLWNsb3VkaW5hcnkvI3NldC11cC1hcGktcm91dGVzXCJcbiAgfSk7XG4gIGNvbnN0IGludGVycHJldEVycm9yTWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gICAgc3dpdGNoIChtZXNzYWdlKSB7XG4gICAgICBjYXNlIFwiTXVzdCBzdXBwbHkgY2xvdWRfbmFtZVwiOlxuICAgICAgY2FzZSBcIk11c3Qgc3VwcGx5IGFwaV9rZXlcIjpcbiAgICAgIGNhc2UgXCJNdXN0IHN1cHBseSBhcGlfc2VjcmV0XCI6XG4gICAgICAgIHJldHVybiBFX0NPTkZJRztcbiAgICAgIGNhc2UgXCJ1bmtub3duIGFwaV9rZXlcIjpcbiAgICAgICAgcmV0dXJuIEVfS0VZX0ZBSUw7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gRV9ERUZBVUxUO1xuICAgIH1cbiAgfTtcbiAgY2xhc3MgQ2xvdWRpbmFyeU1lZGlhU3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5mZXRjaEZ1bmN0aW9uID0gKGlucHV0LCBpbml0KSA9PiB7XG4gICAgICAgIHJldHVybiBmZXRjaChpbnB1dCwgaW5pdCk7XG4gICAgICB9O1xuICAgICAgdGhpcy5hY2NlcHQgPSBcInRleHQvKiwgIGFwcGxpY2F0aW9uLyosIGltYWdlLypcIjtcbiAgICAgIHRoaXMucHJldmlld1NyYyA9IChwdWJsaWNJZCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHB1YmxpY0lkID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgIHJldHVybiBwdWJsaWNJZDtcbiAgICAgICAgcmV0dXJuIHB1YmxpY0lkLnByZXZpZXdTcmM7XG4gICAgICB9O1xuICAgICAgdGhpcy5wYXJzZSA9IChpbWcpID0+IHtcbiAgICAgICAgcmV0dXJuIGltZy5zcmM7XG4gICAgICB9O1xuICAgIH1cbiAgICBhc3luYyBwZXJzaXN0KG1lZGlhKSB7XG4gICAgICBsZXQgbmV3RmlsZXMgPSBbXTtcbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBtZWRpYSkge1xuICAgICAgICBjb25zdCB7IGZpbGUsIGRpcmVjdG9yeSB9ID0gaXRlbTtcbiAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwiZmlsZVwiLCBmaWxlKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwiZGlyZWN0b3J5XCIsIGRpcmVjdG9yeSk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChcImZpbGVuYW1lXCIsIGZpbGUubmFtZSk7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZmV0Y2hGdW5jdGlvbihgL2FwaS9jbG91ZGluYXJ5L21lZGlhYCwge1xuICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgYm9keTogZm9ybURhdGFcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkge1xuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlRGF0YS5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaWxlUmVzID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIDJlMyk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBwYXJzZWRSZXMgPSB7XG4gICAgICAgICAgdHlwZTogXCJmaWxlXCIsXG4gICAgICAgICAgaWQ6IGZpbGVSZXMucHVibGljX2lkLFxuICAgICAgICAgIGZpbGVuYW1lOiBmaWxlUmVzLm9yaWdpbmFsX2ZpbGVuYW1lLFxuICAgICAgICAgIGRpcmVjdG9yeTogXCIvXCIsXG4gICAgICAgICAgcHJldmlld1NyYzogZmlsZVJlcy51cmxcbiAgICAgICAgfTtcbiAgICAgICAgbmV3RmlsZXMucHVzaChwYXJzZWRSZXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ld0ZpbGVzO1xuICAgIH1cbiAgICBhc3luYyBkZWxldGUobWVkaWEpIHtcbiAgICAgIGF3YWl0IHRoaXMuZmV0Y2hGdW5jdGlvbihgL2FwaS9jbG91ZGluYXJ5L21lZGlhLyR7ZW5jb2RlVVJJQ29tcG9uZW50KG1lZGlhLmlkKX1gLCB7XG4gICAgICAgIG1ldGhvZDogXCJERUxFVEVcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIGxpc3Qob3B0aW9ucykge1xuICAgICAgY29uc3QgcXVlcnkgPSB0aGlzLmJ1aWxkUXVlcnkob3B0aW9ucyk7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2hGdW5jdGlvbihcIi9hcGkvY2xvdWRpbmFyeS9tZWRpYVwiICsgcXVlcnkpO1xuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSA0MDEpIHtcbiAgICAgICAgdGhyb3cgRV9VTkFVVEhPUklaRUQ7XG4gICAgICB9XG4gICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09IDQwNCkge1xuICAgICAgICB0aHJvdyBFX0JBRF9ST1VURTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPj0gNTAwKSB7XG4gICAgICAgIGNvbnN0IHsgZSB9ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICBjb25zdCBlcnJvciA9IGludGVycHJldEVycm9yTWVzc2FnZShlKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICBjb25zdCB7IGl0ZW1zLCBvZmZzZXQgfSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGl0ZW1zOiBpdGVtcy5tYXAoKGl0ZW0pID0+IGl0ZW0pLFxuICAgICAgICBuZXh0T2Zmc2V0OiBvZmZzZXRcbiAgICAgIH07XG4gICAgfVxuICAgIGJ1aWxkUXVlcnkob3B0aW9ucykge1xuICAgICAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmtleXMob3B0aW9ucykuZmlsdGVyKChrZXkpID0+IG9wdGlvbnNba2V5XSAhPT0gXCJcIiAmJiBvcHRpb25zW2tleV0gIT09IHZvaWQgMCkubWFwKChrZXkpID0+IGAke2tleX09JHtvcHRpb25zW2tleV19YCkuam9pbihcIiZcIik7XG4gICAgICByZXR1cm4gYD8ke3BhcmFtc31gO1xuICAgIH1cbiAgfVxuICBjbGFzcyBUaW5hQ2xvdWRDbG91ZGluYXJ5TWVkaWFTdG9yZSBleHRlbmRzIENsb3VkaW5hcnlNZWRpYVN0b3JlIHtcbiAgICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICAgIHRoaXMuZmV0Y2hGdW5jdGlvbiA9IGFzeW5jIChpbnB1dCwgaW5pdCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHVybCA9IGlucHV0LnRvU3RyaW5nKCk7XG4gICAgICAgICAgY29uc3QgcXVlcnkgPSBgJHt1cmwuaW5jbHVkZXMoXCI/XCIpID8gXCImXCIgOiBcIj9cIn1jbGllbnRJRD0ke2NsaWVudC5jbGllbnRJZH1gO1xuICAgICAgICAgIGNvbnN0IHJlcyA9IGNsaWVudC5mZXRjaFdpdGhUb2tlbih1cmwgKyBxdWVyeSwgaW5pdCk7XG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgZXhwb3J0czIuQ2xvdWRpbmFyeU1lZGlhU3RvcmUgPSBDbG91ZGluYXJ5TWVkaWFTdG9yZTtcbiAgZXhwb3J0czIuVGluYUNsb3VkQ2xvdWRpbmFyeU1lZGlhU3RvcmUgPSBUaW5hQ2xvdWRDbG91ZGluYXJ5TWVkaWFTdG9yZTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMyLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgZXhwb3J0czJbU3ltYm9sLnRvU3RyaW5nVGFnXSA9IFwiTW9kdWxlXCI7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../.yarn/$$virtual/next-tinacms-cloudinary-virtual-3e265ebba5/1/packages/next-tinacms-cloudinary/dist/index.js\n");

/***/ })

};;