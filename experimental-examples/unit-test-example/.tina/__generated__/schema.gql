# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Float, last: Float): DocumentConnection!
  getDocumentFields: JSON!
  getPostDocument(relativePath: String): PostDocument!
  getPostList(before: String, after: String, first: Float, last: Float): PostConnection!
  getAuthorDocument(relativePath: String): AuthorDocument!
  getAuthorList(before: String, after: String, first: Float, last: Float): AuthorConnection!
  getBlockPageDocument(relativePath: String): BlockPageDocument!
  getBlockPageList(before: String, after: String, first: Float, last: Float): BlockPageConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float): DocumentConnection!
}

union DocumentNode = PostDocument | AuthorDocument | BlockPageDocument

union PostAuthorDocument = AuthorDocument

type Post {
  title: String
  author: PostAuthorDocument
  tags: [String]
  categories: [String]
  published: String
  featured: Boolean
  body: JSON
}

type PostDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Post!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostConnectionEdges {
  cursor: String
  node: PostDocument
}

type PostConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type AuthorSocial {
  platform: String
  handle: String
}

type Author {
  name: String
  social: [AuthorSocial]
  bio: JSON
}

type AuthorDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Author!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type AuthorConnectionEdges {
  cursor: String
  node: AuthorDocument
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

type BlockPageBlocksHero {
  title: String
  description: String
}

union BlockPageBlocksBlockQuoteAuthorDocument = AuthorDocument

type BlockPageBlocksBlockQuote {
  message: JSON
  author: BlockPageBlocksBlockQuoteAuthorDocument
}

union BlockPageBlocksFeaturedPostsBlogsItemDocument = PostDocument

type BlockPageBlocksFeaturedPostsBlogs {
  item: BlockPageBlocksFeaturedPostsBlogsItemDocument
}

type BlockPageBlocksFeaturedPosts {
  header: String
  blogs: [BlockPageBlocksFeaturedPostsBlogs]
}

union BlockPageBlocks = BlockPageBlocksHero | BlockPageBlocksBlockQuote | BlockPageBlocksFeaturedPosts

type BlockPage {
  title: String
  blocks: [BlockPageBlocks]
}

type BlockPageDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: BlockPage!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type BlockPageConnectionEdges {
  cursor: String
  node: BlockPageDocument
}

type BlockPageConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [BlockPageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePostDocument(relativePath: String!, params: PostMutation!): PostDocument!
  createPostDocument(relativePath: String!, params: PostMutation!): PostDocument!
  updateAuthorDocument(relativePath: String!, params: AuthorMutation!): AuthorDocument!
  createAuthorDocument(relativePath: String!, params: AuthorMutation!): AuthorDocument!
  updateBlockPageDocument(relativePath: String!, params: BlockPageMutation!): BlockPageDocument!
  createBlockPageDocument(relativePath: String!, params: BlockPageMutation!): BlockPageDocument!
}

input DocumentMutation {
  post: PostMutation
  author: AuthorMutation
  blockPage: BlockPageMutation
}

input PostMutation {
  title: String
  author: String
  tags: [String]
  categories: [String]
  published: String
  featured: Boolean
  body: JSON
}

input AuthorSocialMutation {
  platform: String
  handle: String
}

input AuthorMutation {
  name: String
  social: [AuthorSocialMutation]
  bio: JSON
}

input BlockPageBlocksHeroMutation {
  title: String
  description: String
}

input BlockPageBlocksBlockQuoteMutation {
  message: JSON
  author: String
}

input BlockPageBlocksFeaturedPostsBlogsMutation {
  item: String
}

input BlockPageBlocksFeaturedPostsMutation {
  header: String
  blogs: [BlockPageBlocksFeaturedPostsBlogsMutation]
}

input BlockPageBlocksMutation {
  hero: BlockPageBlocksHeroMutation
  blockQuote: BlockPageBlocksBlockQuoteMutation
  featuredPosts: BlockPageBlocksFeaturedPostsMutation
}

input BlockPageMutation {
  title: String
  blocks: [BlockPageBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  