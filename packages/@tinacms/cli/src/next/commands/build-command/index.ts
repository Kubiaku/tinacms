import fetch, { Headers } from 'node-fetch'
import { Command, Option } from 'clipanion'
import Progress from 'progress'
import fs from 'fs-extra'
import type { ViteDevServer } from 'vite'
import { buildSchema, Database } from '@tinacms/graphql'
import { ConfigManager } from '../../config-manager'
import { logger, summary } from '../../../logger'
import { buildProductionSpa } from './server'
import { Codegen } from '../../codegen'
import { parseURL } from '@tinacms/schema-tools'
import {
  buildASTSchema,
  buildClientSchema,
  getIntrospectionQuery,
} from 'graphql'
import { diff } from '@graphql-inspector/core'
import { IndexStatusResponse, waitForDB } from './waitForDB'
import { createAndInitializeDatabase, createDBServer } from '../../database'
import { sleepAndCallFunc } from '../../../utils/sleep'
import { dangerText, linkText, warnText } from '../../../utils/theme'
import { createDevServer } from '../dev-command/server'
import { BaseCommand } from '../baseCommands'

export class BuildCommand extends BaseCommand {
  static paths = [['build']]
  localOption = Option.Boolean('--local', {
    description:
      'Starts local Graphql server and builds the local client instead of production client',
  })
  tinaGraphQLVersion = Option.String('--tina-graphql-version', {
    description:
      'Specify the version of @tinacms/graphql to use (defaults to latest)',
  })
  /**
   * This option allows the user to skip the tina cloud checks if they want to. This could be useful for mismatched GraphQL versions or if they want to build only using the local client and never connect to Tina Cloud
   */
  skipCloudChecks = Option.Boolean('--skip-cloud-checks', false, {
    description: 'Skips checking the provided cloud config.',
  })

  static usage = Command.Usage({
    category: `Commands`,
    description: `Build the CMS and autogenerated modules for usage with Tina Cloud`,
  })

  async catch(error: any): Promise<void> {
    console.error(error)
    process.exit(1)
  }

  async execute(): Promise<number | void> {
    logger.info('Starting Tina build')
    this.logDeprecationWarnings()
    const configManager = new ConfigManager({
      rootPath: this.rootPath,
      tinaGraphQLVersion: this.tinaGraphQLVersion,
      legacyNoSDK: this.noSDK,
    })

    try {
      await configManager.processConfig()
    } catch (e) {
      logger.error(e.message)
      logger.error('Unable to build, please fix your Tina config and try again')
      process.exit(1)
    }
    let server: ViteDevServer | undefined
    // Initialize the host TCP server
    createDBServer(Number(this.datalayerPort))
    const database = await createAndInitializeDatabase(
      configManager,
      Number(this.datalayerPort)
    )

    const { queryDoc, fragDoc, graphQLSchema, tinaSchema, lookup } =
      await buildSchema(configManager.config)

    const codegen = new Codegen({
      configManager: configManager,
      port: this.localOption ? Number(this.port) : undefined,
      isLocal: this.localOption,
      queryDoc,
      fragDoc,
      graphqlSchemaDoc: graphQLSchema,
      tinaSchema,
      lookup,
    })
    const apiURL = await codegen.execute()

    if (this.localOption) {
      // start the dev server if we are building locally
      await this.indexContentWithSpinner({
        database,
        graphQLSchema,
        tinaSchema,
      })
      server = await createDevServer(configManager, database, apiURL, true)
      await server.listen(Number(this.port))
      console.log('server listening on port', this.port)
    }

    const skipCloudChecks =
      this.skipCloudChecks || configManager.hasSelfHostedConfig()

    if (!skipCloudChecks) {
      await this.checkClientInfo(configManager, codegen.productionUrl)
      await waitForDB(configManager.config, codegen.productionUrl, false)
      await this.checkGraphqlSchema(
        configManager,
        database,
        codegen.productionUrl
      )
    }

    await buildProductionSpa(configManager, database, codegen.productionUrl)

    // Add the gitignore so the index.html and assets are committed to git
    await fs.outputFile(
      configManager.outputGitignorePath,
      'index.html\nassets/'
    )

    const summaryItems = []
    if (!configManager.shouldSkipSDK()) {
      summaryItems.push({
        emoji: 'ü§ñ',
        heading: 'Auto-generated files',
        subItems: [
          {
            key: 'GraphQL Client',
            value: configManager.printGeneratedClientFilePath(),
          },
          {
            key: 'Typescript Types',
            value: configManager.printGeneratedTypesFilePath(),
          },
        ],
      })
    }

    summary({
      heading: 'Tina build complete',
      items: [
        {
          emoji: 'ü¶ô',
          heading: 'Tina Config',
          subItems: [
            {
              key: 'API url',
              value: apiURL,
            },
          ],
        },
        ...summaryItems,
      ],
    })
    if (this.subCommand) {
      await this.startSubCommand()
    } else {
      process.exit()
    }
  }

  async checkClientInfo(configManager: ConfigManager, apiURL: string) {
    const { config } = configManager
    const token = config.token
    const { clientId, branch, host } = parseURL(apiURL)

    const url = `https://${host}/db/${clientId}/status/${branch}`
    const bar = new Progress('Checking clientId and token. :prog', 1)

    // Check the client information
    let branchKnown = false
    try {
      const res = await request({
        token,
        url,
      })
      bar.tick({
        prog: '‚úÖ',
      })
      if (!(res.status === 'unknown')) {
        branchKnown = true
      }
    } catch (e) {
      summary({
        heading: 'Error when checking client information',
        items: [
          {
            emoji: '‚ùå',
            heading: 'You provided',
            subItems: [
              {
                key: 'clientId',
                value: config.clientId,
              },
              {
                key: 'token',
                value: config.token,
              },
            ],
          },
        ],
      })
      throw e
    }

    const branchBar = new Progress('Checking branch is on Tina Cloud. :prog', 1)

    // We know the branch is known (could be status: 'failed', 'inprogress' or 'success')
    if (branchKnown) {
      branchBar.tick({
        prog: '‚úÖ',
      })
      return
    }

    // We know the branch is status: 'unknown'

    // Check for a max of 6 times
    for (let i = 0; i <= 5; i++) {
      await sleepAndCallFunc({
        fn: async () => {
          const res = await request({
            token,
            url,
          })
          if (this.verbose) {
            logger.info(
              `Branch status: ${res.status}. Attempt: ${
                i + 1
              }. Trying again in 5 seconds.`
            )
          }
          if (!(res.status === 'unknown')) {
            branchBar.tick({
              prog: '‚úÖ',
            })
            return
          }
        },
        ms: 5000,
      })
    }

    branchBar.tick({
      prog: '‚ùå',
    })

    // I wanted to use the summary function here but I was getting the following error:
    // RangeError: Invalid count value
    // at String.repeat (<anonymous>)
    // summary({
    //   heading: `ERROR: Branch '${branch}' is not on Tina Cloud. Please make sure that branch '${branch}' exists in your repository and that you have pushed your all changes to the remote. View all all branches and there current status here: https://app.tina.io/projects/${clientId}/configuration`,
    //   items: [
    //     {
    //       emoji: '‚ùå',
    //       heading: 'You provided',
    //       subItems: [
    //         {
    //           key: 'branch',
    //           value: config.branch,
    //         },
    //       ],
    //     },
    //   ],
    // })
    logger.error(
      `${dangerText(
        `ERROR: Branch '${branch}' is not on Tina Cloud.`
      )} Please make sure that branch '${branch}' exists in your repository and that you have pushed your all changes to the remote. View all all branches and there current status here: ${linkText(
        `https://app.tina.io/projects/${clientId}/configuration`
      )}`
    )
    throw new Error('Branch is not on Tina Cloud')
  }

  async checkGraphqlSchema(
    configManager: ConfigManager,
    database: Database,
    apiURL: string
  ) {
    const bar = new Progress(
      'Checking local GraphQL Schema matches server. :prog',
      1
    )
    const { config } = configManager
    const token = config.token

    // Get the remote schema from the graphql endpoint
    const remoteSchema = await fetchRemoteGraphqlSchema({
      url: apiURL,
      token,
    })

    if (!remoteSchema) {
      bar.tick({
        prog: '‚ùå',
      })
      let errorMessage = `The remote GraphQL schema does not exist. Check indexing for this branch.`
      if (config?.branch) {
        errorMessage += `\n\nAdditional info: Branch: ${config.branch}, Client ID: ${config.clientId} `
      }
      throw new Error(errorMessage)
    }

    const remoteGqlSchema = buildClientSchema(remoteSchema)

    // This will always be the filesystem bridge.
    const localSchemaDocument = await database.getGraphQLSchemaFromBridge()
    const localGraphqlSchema = buildASTSchema(localSchemaDocument)
    try {
      const diffResult = await diff(localGraphqlSchema, remoteGqlSchema)

      if (diffResult.length === 0) {
        bar.tick({
          prog: '‚úÖ',
        })
      } else {
        bar.tick({
          prog: '‚ùå',
        })
        let errorMessage = `The local GraphQL schema doesn't match the remote GraphQL schema. Please push up your changes to Github to update your remote GraphQL schema.`
        if (config?.branch) {
          errorMessage += `\n\nAdditional info: Branch: ${config.branch}, Client ID: ${config.clientId} `
        }
        throw new Error(errorMessage)
      }
    } catch (e) {
      // In some cases, a GraphQL version mismatch prevents us from being able to do this check.
      // Note that a check will still be run from the Tina admin since it's deduped in the Vite build
      // Unfortunately there's no specific error class to compare with, so a string check here should still
      // allow other errors to throw properly
      if (e.message.startsWith('Cannot use')) {
        logger.warn(
          `${warnText(
            'Skipping schema check due to conflicting GraphQL versions'
          )}`
        )
      } else {
        throw e
      }
    }
  }
}

//  This was taken from packages/tinacms/src/unifiedClient/index.ts
// TODO: maybe move this to a shared util package?
async function request(args: {
  url: string
  token: string
}): Promise<{ status: string; timestamp: number }> {
  const headers = new Headers()
  if (args.token) {
    headers.append('X-API-KEY', args.token)
  }
  headers.append('Content-Type', 'application/json')

  const url = args?.url

  const res = await fetch(url, {
    method: 'GET',
    headers,
    redirect: 'follow',
  })
  const json = await res.json()
  if (!res.ok) {
    let additionalInfo = ''
    if (res.status === 401 || res.status === 403) {
      additionalInfo =
        'Please check that your client ID, URL and read only token are configured properly.'
    }
    if (json) {
      additionalInfo += `\n\nMessage from server: ${json.message}`
    }
    throw new Error(
      `Server responded with status code ${res.status}, ${res.statusText}. ${
        additionalInfo ? additionalInfo : ''
      } Please see our FAQ for more information: https://tina.io/docs/errors/faq/`
    )
  }
  if (json.errors) {
    throw new Error(
      `Unable to fetch, please see our FAQ for more information: https://tina.io/docs/errors/faq/

      Errors: \n\t${json.errors.map((error) => error.message).join('\n')}`
    )
  }
  return {
    status: json?.status,
    timestamp: json?.timestamp,
  } as { status: IndexStatusResponse['status']; timestamp: number }
}

export const fetchRemoteGraphqlSchema = async ({
  url,
  token,
}: {
  url: string
  token?: string
}) => {
  const headers = new Headers()
  if (token) {
    headers.append('X-API-KEY', token)
  }
  const body = JSON.stringify({ query: getIntrospectionQuery(), variables: {} })

  headers.append('Content-Type', 'application/json')

  const res = await fetch(url, {
    method: 'POST',
    headers,
    body,
  })
  const data = await res.json()
  return data?.data
}
