//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
import { gql } from 'tinacms';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: Maybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  sys?: Maybe<SystemInfo>;
  id: Scalars['ID'];
  form: Scalars['JSON'];
  values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Int'];
};

export type Query = {
  __typename?: 'Query';
  getCollection: Collection;
  getCollections: Array<Collection>;
  node: Node;
  getDocument: DocumentNode;
  getDocumentList: DocumentConnection;
  getDocumentFields: Scalars['JSON'];
  getPageDocument: PageDocument;
  getPageList: PageConnection;
  getBlockPageDocument: BlockPageDocument;
  getBlockPageList: BlockPageConnection;
};


export type QueryGetCollectionArgs = {
  collection?: Maybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: Maybe<Scalars['String']>;
};


export type QueryGetDocumentArgs = {
  collection?: Maybe<Scalars['String']>;
  relativePath?: Maybe<Scalars['String']>;
};


export type QueryGetDocumentListArgs = {
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryGetPageDocumentArgs = {
  relativePath?: Maybe<Scalars['String']>;
};


export type QueryGetPageListArgs = {
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryGetBlockPageDocumentArgs = {
  relativePath?: Maybe<Scalars['String']>;
};


export type QueryGetBlockPageListArgs = {
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label: Scalars['String'];
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type DocumentNode = PageDocument | BlockPageDocument;

export type PageRelatedPageDocument = BlockPageDocument;

export type Page = {
  __typename?: 'Page';
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  relatedPage?: Maybe<PageRelatedPageDocument>;
};

export type PageDocument = Node & Document & {
  __typename?: 'PageDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Page;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<PageDocument>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type BlockPageSeo = {
  __typename?: 'BlockPageSeo';
  ogTitle?: Maybe<Scalars['String']>;
};

export type BlockPageSocialRelatedPageDocument = PageDocument;

export type BlockPageSocial = {
  __typename?: 'BlockPageSocial';
  handle?: Maybe<Scalars['String']>;
  platform?: Maybe<Scalars['String']>;
  relatedPage?: Maybe<BlockPageSocialRelatedPageDocument>;
};

export type BlockPageRelatedPageDocument = PageDocument;

export type BlockPageBlocksHeroRelationDocument = PageDocument;

export type BlockPageBlocksHero = {
  __typename?: 'BlockPageBlocksHero';
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  relation?: Maybe<BlockPageBlocksHeroRelationDocument>;
};

export type BlockPageBlocksCta = {
  __typename?: 'BlockPageBlocksCta';
  title?: Maybe<Scalars['String']>;
  action?: Maybe<Scalars['String']>;
};

export type BlockPageBlocks = BlockPageBlocksHero | BlockPageBlocksCta;

export type BlockPage = {
  __typename?: 'BlockPage';
  title?: Maybe<Scalars['String']>;
  seo?: Maybe<BlockPageSeo>;
  social?: Maybe<Array<Maybe<BlockPageSocial>>>;
  relatedPage?: Maybe<BlockPageRelatedPageDocument>;
  blocks?: Maybe<Array<Maybe<BlockPageBlocks>>>;
};

export type BlockPageDocument = Node & Document & {
  __typename?: 'BlockPageDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: BlockPage;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type BlockPageConnectionEdges = {
  __typename?: 'BlockPageConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<BlockPageDocument>;
};

export type BlockPageConnection = Connection & {
  __typename?: 'BlockPageConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
  edges?: Maybe<Array<Maybe<BlockPageConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  createDocument: DocumentNode;
  updatePageDocument: PageDocument;
  createPageDocument: PageDocument;
  updateBlockPageDocument: BlockPageDocument;
  createBlockPageDocument: BlockPageDocument;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: Maybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: Maybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationCreateDocumentArgs = {
  collection?: Maybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdatePageDocumentArgs = {
  relativePath: Scalars['String'];
  params: PageMutation;
};


export type MutationCreatePageDocumentArgs = {
  relativePath: Scalars['String'];
  params: PageMutation;
};


export type MutationUpdateBlockPageDocumentArgs = {
  relativePath: Scalars['String'];
  params: BlockPageMutation;
};


export type MutationCreateBlockPageDocumentArgs = {
  relativePath: Scalars['String'];
  params: BlockPageMutation;
};

export type DocumentMutation = {
  page?: Maybe<PageMutation>;
  blockPage?: Maybe<BlockPageMutation>;
};

export type PageMutation = {
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  relatedPage?: Maybe<Scalars['String']>;
};

export type BlockPageSeoMutation = {
  ogTitle?: Maybe<Scalars['String']>;
};

export type BlockPageSocialMutation = {
  handle?: Maybe<Scalars['String']>;
  platform?: Maybe<Scalars['String']>;
  relatedPage?: Maybe<Scalars['String']>;
};

export type BlockPageBlocksHeroMutation = {
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  relation?: Maybe<Scalars['String']>;
};

export type BlockPageBlocksCtaMutation = {
  title?: Maybe<Scalars['String']>;
  action?: Maybe<Scalars['String']>;
};

export type BlockPageBlocksMutation = {
  hero?: Maybe<BlockPageBlocksHeroMutation>;
  cta?: Maybe<BlockPageBlocksCtaMutation>;
};

export type BlockPageMutation = {
  title?: Maybe<Scalars['String']>;
  seo?: Maybe<BlockPageSeoMutation>;
  social?: Maybe<Array<Maybe<BlockPageSocialMutation>>>;
  relatedPage?: Maybe<Scalars['String']>;
  blocks?: Maybe<Array<Maybe<BlockPageBlocksMutation>>>;
};

export type PagePartsFragment = { __typename?: 'Page', title?: Maybe<string>, body?: Maybe<string>, relatedPage?: Maybe<{ __typename?: 'BlockPageDocument', id: string }> };

export type BlockPagePartsFragment = { __typename?: 'BlockPage', title?: Maybe<string>, seo?: Maybe<{ __typename: 'BlockPageSeo', ogTitle?: Maybe<string> }>, social?: Maybe<Array<Maybe<{ __typename: 'BlockPageSocial', handle?: Maybe<string>, platform?: Maybe<string>, relatedPage?: Maybe<{ __typename?: 'PageDocument', id: string }> }>>>, relatedPage?: Maybe<{ __typename?: 'PageDocument', id: string }>, blocks?: Maybe<Array<Maybe<{ __typename: 'BlockPageBlocksHero', title?: Maybe<string>, description?: Maybe<string>, relation?: Maybe<{ __typename?: 'PageDocument', id: string }> } | { __typename: 'BlockPageBlocksCta', title?: Maybe<string>, action?: Maybe<string> }>>> };

export type GetPageDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetPageDocumentQuery = { __typename?: 'Query', getPageDocument: { __typename?: 'PageDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Page', title?: Maybe<string>, body?: Maybe<string>, relatedPage?: Maybe<{ __typename?: 'BlockPageDocument', id: string }> } } };

export type GetPageListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetPageListQuery = { __typename?: 'Query', getPageList: { __typename?: 'PageConnection', totalCount: number, edges?: Maybe<Array<Maybe<{ __typename?: 'PageConnectionEdges', node?: Maybe<{ __typename?: 'PageDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Page', title?: Maybe<string>, body?: Maybe<string>, relatedPage?: Maybe<{ __typename?: 'BlockPageDocument', id: string }> } }> }>>> } };

export type GetBlockPageDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetBlockPageDocumentQuery = { __typename?: 'Query', getBlockPageDocument: { __typename?: 'BlockPageDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'BlockPage', title?: Maybe<string>, seo?: Maybe<{ __typename: 'BlockPageSeo', ogTitle?: Maybe<string> }>, social?: Maybe<Array<Maybe<{ __typename: 'BlockPageSocial', handle?: Maybe<string>, platform?: Maybe<string>, relatedPage?: Maybe<{ __typename?: 'PageDocument', id: string }> }>>>, relatedPage?: Maybe<{ __typename?: 'PageDocument', id: string }>, blocks?: Maybe<Array<Maybe<{ __typename: 'BlockPageBlocksHero', title?: Maybe<string>, description?: Maybe<string>, relation?: Maybe<{ __typename?: 'PageDocument', id: string }> } | { __typename: 'BlockPageBlocksCta', title?: Maybe<string>, action?: Maybe<string> }>>> } } };

export type GetBlockPageListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetBlockPageListQuery = { __typename?: 'Query', getBlockPageList: { __typename?: 'BlockPageConnection', totalCount: number, edges?: Maybe<Array<Maybe<{ __typename?: 'BlockPageConnectionEdges', node?: Maybe<{ __typename?: 'BlockPageDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'BlockPage', title?: Maybe<string>, seo?: Maybe<{ __typename: 'BlockPageSeo', ogTitle?: Maybe<string> }>, social?: Maybe<Array<Maybe<{ __typename: 'BlockPageSocial', handle?: Maybe<string>, platform?: Maybe<string>, relatedPage?: Maybe<{ __typename?: 'PageDocument', id: string }> }>>>, relatedPage?: Maybe<{ __typename?: 'PageDocument', id: string }>, blocks?: Maybe<Array<Maybe<{ __typename: 'BlockPageBlocksHero', title?: Maybe<string>, description?: Maybe<string>, relation?: Maybe<{ __typename?: 'PageDocument', id: string }> } | { __typename: 'BlockPageBlocksCta', title?: Maybe<string>, action?: Maybe<string> }>>> } }> }>>> } };

export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  title
  body
  relatedPage {
    ... on Document {
      id
    }
  }
}
    `;
export const BlockPagePartsFragmentDoc = gql`
    fragment BlockPageParts on BlockPage {
  title
  seo {
    __typename
    ogTitle
  }
  social {
    __typename
    handle
    platform
    relatedPage {
      ... on Document {
        id
      }
    }
  }
  relatedPage {
    ... on Document {
      id
    }
  }
  blocks {
    __typename
    ... on BlockPageBlocksHero {
      title
      description
      relation {
        ... on Document {
          id
        }
      }
    }
    ... on BlockPageBlocksCta {
      title
      action
    }
  }
}
    `;
export const GetPageDocumentDocument = gql`
    query getPageDocument($relativePath: String!) {
  getPageDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...PageParts
    }
  }
}
    ${PagePartsFragmentDoc}`;
export const GetPageListDocument = gql`
    query getPageList {
  getPageList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...PageParts
        }
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export const GetBlockPageDocumentDocument = gql`
    query getBlockPageDocument($relativePath: String!) {
  getBlockPageDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...BlockPageParts
    }
  }
}
    ${BlockPagePartsFragmentDoc}`;
export const GetBlockPageListDocument = gql`
    query getBlockPageList {
  getBlockPageList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...BlockPageParts
        }
      }
    }
  }
}
    ${BlockPagePartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      getPageDocument(variables: GetPageDocumentQueryVariables, options?: C): Promise<{data: GetPageDocumentQuery, variables: GetPageDocumentQueryVariables, query: string}> {
        return requester<{data: GetPageDocumentQuery, variables: GetPageDocumentQueryVariables, query: string}, GetPageDocumentQueryVariables>(GetPageDocumentDocument, variables, options);
      },
    getPageList(variables?: GetPageListQueryVariables, options?: C): Promise<{data: GetPageListQuery, variables: GetPageListQueryVariables, query: string}> {
        return requester<{data: GetPageListQuery, variables: GetPageListQueryVariables, query: string}, GetPageListQueryVariables>(GetPageListDocument, variables, options);
      },
    getBlockPageDocument(variables: GetBlockPageDocumentQueryVariables, options?: C): Promise<{data: GetBlockPageDocumentQuery, variables: GetBlockPageDocumentQueryVariables, query: string}> {
        return requester<{data: GetBlockPageDocumentQuery, variables: GetBlockPageDocumentQueryVariables, query: string}, GetBlockPageDocumentQueryVariables>(GetBlockPageDocumentDocument, variables, options);
      },
    getBlockPageList(variables?: GetBlockPageListQueryVariables, options?: C): Promise<{data: GetBlockPageListQuery, variables: GetBlockPageListQueryVariables, query: string}> {
        return requester<{data: GetBlockPageListQuery, variables: GetBlockPageListQueryVariables, query: string}, GetBlockPageListQueryVariables>(GetBlockPageListDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { getStaticPropsForTina } from 'tinacms'
const requester: (doc: any, vars?: any, options?: any) => Promise<any> = async (
  doc,
  vars,
  _options
) => {
  // const data = await tinaClient.request(doc, { variables: vars }); 
  const res = await await getStaticPropsForTina({query: doc, variables: vars})
  return res
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = ()=>getSdk(requester)

