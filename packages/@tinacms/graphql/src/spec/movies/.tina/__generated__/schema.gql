"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  documentConnection(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
  getDocumentFields: JSON!
  movie(relativePath: String): MovieDocument!
  movieConnection(before: String, after: String, first: Float, last: Float, sort: String): MovieConnection!
  director(relativePath: String): DirectorDocument!
  directorConnection(before: String, after: String, first: Float, last: Float, sort: String): DirectorConnection!
  actor(relativePath: String): ActorDocument!
  actorConnection(before: String, after: String, first: Float, last: Float, sort: String): ActorConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = MovieDocument | DirectorDocument | ActorDocument

union MovieDirectorDocument = DirectorDocument

type Movie {
  title: String
  releaseDate: String
  rating: Float
  archived: Boolean
  genre: String
  director: MovieDirectorDocument
  body: JSON
}

type MovieDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Movie!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type MovieConnectionEdges {
  cursor: String
  node: MovieDocument
}

type MovieConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [MovieConnectionEdges]
}

type Director {
  name: String
}

type DirectorDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Director!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type DirectorConnectionEdges {
  cursor: String
  node: DirectorDocument
}

type DirectorConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DirectorConnectionEdges]
}

type Actor {
  name: String
  body: String
}

type ActorDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Actor!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ActorConnectionEdges {
  cursor: String
  node: ActorDocument
}

type ActorConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [ActorConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateMovie(relativePath: String!, params: MovieMutation!): MovieDocument!
  createMovie(relativePath: String!, params: MovieMutation!): MovieDocument!
  updateDirector(relativePath: String!, params: DirectorMutation!): DirectorDocument!
  createDirector(relativePath: String!, params: DirectorMutation!): DirectorDocument!
  updateActor(relativePath: String!, params: ActorMutation!): ActorDocument!
  createActor(relativePath: String!, params: ActorMutation!): ActorDocument!
}

input DocumentMutation {
  movie: MovieMutation
  director: DirectorMutation
  actor: ActorMutation
}

input MovieMutation {
  title: String
  releaseDate: String
  rating: Float
  archived: Boolean
  genre: String
  director: String
  body: JSON
}

input DirectorMutation {
  name: String
}

input ActorMutation {
  name: String
  body: String
}
