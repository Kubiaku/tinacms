import { Framework, GeneratedFile, InitEnvironment } from '.'
import prompts, { PromptType } from 'prompts'
import { linkText, logText } from '../../utils/theme'
import crypto from 'crypto-js'
import fs from 'fs-extra'

async function writeTinaEnv(config: Record<any, any>) {
  let envFile = `// Generated by Tina CLI\n\n`
  if (config.kvRestApiUrl !== undefined) {
    envFile += `KV_REST_API_URL=${config.kvRestApiUrl}\n`
  }
  if (config.kvRestApiToken !== undefined) {
    envFile += `KV_REST_API_TOKEN=${config.kvRestApiToken}\n`
  }
  if (config.nextAuthSecret !== undefined) {
    envFile += `NEXTAUTH_SECRET=${config.nextAuthSecret}\n`
  }
  if (config.vercelKVNextAuthCredentialsKey !== undefined) {
    envFile += `NEXTAUTH_CREDENTIALS_KEY=${config.vercelKVNextAuthCredentialsKey}\n`
  }
  if (config.clientId !== undefined && config.framework.name === 'next') {
    envFile += `NEXT_PUBLIC_TINA_CLIENT_ID=${config.clientId}\n`
  }
  if (config.githubToken !== undefined) {
    envFile += `GITHUB_PERSONAL_ACCESS_TOKEN=${config.githubToken}\n`
  }
  if (config.token !== undefined) {
    envFile += `TINA_TOKEN=${config.token}\n`
  }
  await fs.writeFile('.env.tina', envFile)
}

async function configure(
  env: InitEnvironment,
  opts: { debug?: boolean; showSelfHosted?: boolean }
) {
  const promptOptions = { onCancel: () => process.exit(0) } // allow ctrl + c to exit

  // helpers
  const isNext = (promptType: PromptType) => (_, answers) =>
    answers.framework.name === 'next' ? promptType : null
  const isNextAuth = (promptType: PromptType) => (_, answers) =>
    answers.nextAuth ? promptType : null
  const dataLayerEnabled = (promptType: PromptType) => (_, answers) =>
    answers.dataLayer ? promptType : null
  const selfHostedEnabled = (promptType: PromptType) => (_) =>
    opts.showSelfHosted ? promptType : null

  // conditionally generate overwrite prompts for generated ts/js
  const generatedFileOverwritePrompt = ({
    condition,
    configName,
    generatedFile,
  }: {
    configName: string
    condition: (answers: any) => boolean
    generatedFile: GeneratedFile
  }) => {
    const results = []
    if (generatedFile.javascriptExists) {
      results.push({
        name: `overwrite${configName}JS`,
        type: (_, answers) =>
          !answers.typescript && condition(answers) ? 'confirm' : null,
        message: `Found existing file at ${generatedFile.fullPathJS}. Would you like to override?`,
      })
    }
    if (generatedFile.typescriptExists) {
      results.push({
        name: `overwrite${configName}TS`,
        type: (_, answers) =>
          answers.typescript && condition(answers) ? 'confirm' : null,
        message: `Found existing file at ${generatedFile.fullPathTS}. Would you like to override?`,
      })
    }
    return results
  }

  const forestryDisclaimer = logText(
    `Note: This migration will update some of your content to match tina.  Please save a backup of your content before doing this migration. (This can be done with git)`
  )

  let config: Record<any, any> = await prompts(
    [
      {
        name: 'packageManager',
        type: 'select',
        message: 'Choose your package manager',
        choices: [
          { title: 'PNPM', value: 'pnpm' },
          { title: 'Yarn', value: 'yarn' },
          { title: 'NPM', value: 'npm' },
        ],
      },
      {
        name: 'framework',
        type: 'select',
        message: 'What framework are you using?',
        choices: [
          { title: 'Next.js', value: { name: 'next', reactive: true } },
          { title: 'Hugo', value: { name: 'hugo', reactive: false } },
          { title: 'Jekyll', value: { name: 'jekyll', reactive: false } },
          {
            title: 'Other (SSG frameworks like gatsby, etc.)',
            value: { name: 'other', reactive: false },
          },
        ] as { title: string; value: Framework }[],
      },
      {
        name: 'typescript',
        type: 'confirm',
        initial: true,
        message:
          'Would you like to use Typescript for your Tina Configuration (Recommended)?',
      },
      {
        name: 'publicFolder',
        type: (_, answers) =>
          answers.framework.name !== 'next' && answers.framework.name !== 'hugo'
            ? 'text'
            : null,
        initial: 'public',
        message:
          `Where are public assets stored? (default: "public")\n` +
          logText(
            `Not sure what value to use? Refer to our "Frameworks" doc: ${linkText(
              'https://tina.io/docs/integration/frameworks/#configuring-tina-with-each-framework'
            )}`
          ),
      },
      {
        name: 'forestryMigrate',
        type: (_) => (env.forestryConfigExists ? 'confirm' : null),
        initial: true,
        message: `Would you like to migrate your Forestry templates?\n${forestryDisclaimer}`,
      },
      {
        name: 'frontMatterFormat',
        type: (_, answers) => {
          if (answers.framework.name === 'hugo' && answers.forestryMigrate) {
            if (env.frontMatterFormat && env.frontMatterFormat[1]) {
              return null
            }
            return 'select'
          }
        },
        choices: [
          { title: 'yaml', value: 'yaml' },
          { title: 'toml', value: 'toml' },
          { title: 'json', value: 'json' },
        ],
        message: `What format are you using in your frontmatter?`,
      },
      {
        name: 'overwriteTemplatesJS',
        type: (_, answers) =>
          !answers.typescript
            ? env.generatedFiles['templates'].javascriptExists
              ? 'confirm'
              : null
            : null,
        message: `Found existing file at ${env.generatedFiles['templates'].javascriptExists}. Would you like to override?`,
      },
      {
        name: 'overwriteTemplatesTS',
        type: (_, answers) =>
          answers.typescript
            ? env.generatedFiles['templates'].typescriptExists
              ? 'confirm'
              : null
            : null,
        message: `Found existing file at ${env.generatedFiles['templates'].fullPathTS}. Would you like to override?`,
      },
      {
        name: 'dataLayer',
        type: selfHostedEnabled('confirm'),
        initial: true,
        message: 'Enable Self-Hosted Data Layer?',
      },
      {
        name: 'githubToken',
        type: (_, answers) => (answers.dataLayer ? 'text' : null),
        message: `What is your GitHub Personal Access Token? (Hit enter to skip and set up later)\n${logText(
          'Create one here: '
        )}${linkText('https://github.com/settings/tokens?type=beta')}`,
        initial: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,
      },
      {
        name: 'dataLayerAdapter',
        message: 'Select a self-hosted data layer adapter',
        type: dataLayerEnabled('select'),
        choices: (_, answers) => {
          if (answers.framework.name === 'next') {
            return [
              { title: 'Vercel KV', value: 'upstash-redis' },
              { title: 'Upstash Redis', value: 'upstash-redis' },
            ]
          } else {
            return [{ title: 'Upstash Redis', value: 'upstash-redis' }]
          }
        },
      },
      {
        name: 'kvRestApiUrl',
        type: (_, answers) =>
          answers.dataLayerAdapter === 'upstash-redis' ? 'text' : null,
        message: `What is the KV (Redis) Rest API URL? (Hit enter to skip and set up yourself later)`,
        initial: process.env.KV_REST_API_URL,
      },
      {
        name: 'kvRestApiToken',
        type: (prev) => (prev !== undefined ? 'text' : null),
        message: `What is the KV (Redis) Rest API Token? (Hit enter to skip and set up yourself later)`,
        initial: process.env.KV_REST_API_TOKEN,
      },
      {
        name: 'nextAuth',
        type:
          selfHostedEnabled('confirm') && isNext('confirm') ? 'confirm' : null,
        initial: 'true',
        message: 'Enable NextAuth.js integration?',
      },
      {
        name: 'nextAuthSecret',
        type: (_, answers) => (answers.nextAuth ? 'text' : null),
        message: `What is the NextAuth.js Secret? (Hit enter to use a randomly generated secret)`,
        initial:
          process.env.NEXTAUTH_SECRET ||
          crypto.lib.WordArray.random(16).toString(),
      },
      {
        name: 'clientId',
        type: (_, answers) =>
          !answers.dataLayer || (answers.dataLayer && !answers.nextAuth)
            ? 'text'
            : null,
        message: `What is your Tina Cloud Client ID? (Hit enter to skip and set up yourself later)\n${logText(
          "Don't have a Client ID? Create one here: "
        )}${linkText('https://app.tina.io/projects/new')}`,
        initial: (_, answers) =>
          answers.framework.name === 'next'
            ? process.env.NEXT_PUBLIC_TINA_CLIENT_ID
            : undefined,
      },
      {
        name: 'token',
        type: (_, answers) =>
          !answers.dataLayer || (answers.dataLayer && !answers.nextAuth)
            ? 'text'
            : null,
        message: (prev) =>
          `What is your Tina Cloud Read Only Token?\n${logText(
            "Don't have a Read Only Token? Create one here: "
          )}${linkText(
            `https://app.tina.io/projects/${prev || '[XXX]'}/tokens`
          )}`,
        initial: process.env.TINA_TOKEN,
      },
      {
        name: 'nextAuthProvider',
        message: 'Select a self-hosted data layer adapter',
        type: isNextAuth('select'),
        choices: [
          {
            title: 'Vercel KV Credentials Provider',
            value: 'vercel-kv-credentials-provider',
          },
        ],
      },
      {
        name: 'kvRestApiUrl',
        type: (_, answers) =>
          answers.nextAuthProvider === 'vercel-kv-credentials-provider' &&
          answers.kvRestApiUrl === undefined
            ? 'text'
            : null,
        message: `What is the KV (Redis) Rest API URL? (Hit enter to skip and set up yourself later)`,
        initial: process.env.KV_REST_API_URL,
      },
      {
        name: 'kvRestApiToken',
        type: (_, answers) =>
          answers.nextAuthProvider === 'vercel-kv-credentials-provider' &&
          answers.kvRestApiUrl !== undefined &&
          answers.kvRestApiToken === undefined
            ? 'text'
            : null,
        message: `What is the KV (Redis) Rest API Token? (Hit enter to skip and set up yourself later)`,
        initial: process.env.KV_REST_API_TOKEN,
      },
      {
        name: 'vercelKVNextAuthCredentialsKey',
        type: (_, answers) =>
          answers.nextAuthProvider === 'vercel-kv-credentials-provider'
            ? 'text'
            : null,
        message: `Enter a name for the Vercel KV Credentials Provider Auth Collection (Defaults to "tinacms_users")`,
        initial: process.env.NEXTAUTH_CREDENTIALS_KEY || 'tinacms_users',
      },
      {
        name: 'nextAuthCredentialsProviderName',
        type: (_, answers) =>
          answers.nextAuthProvider === 'vercel-kv-credentials-provider'
            ? 'text'
            : null,
        message: `Enter a name for the Vercel KV Credentials Provider (Defaults to "VercelKVCredentialsProvider")`,
        initial: 'VercelKVCredentialsProvider',
      },
      {
        name: 'installTailwindCSS',
        type: (_, answers) =>
          answers.nextAuthProvider === 'vercel-kv-credentials-provider' &&
          !env.tailwindConfigExists
            ? 'confirm'
            : null,
        message: `Install TailwindCSS? (Required for Vercel KV Credentials Provider Signin & Registration Pages)`,
        initial: true,
      },
      {
        name: 'isLocalEnvVarName',
        type: (_, answers) =>
          answers.nextAuth || answers.dataLayer ? 'text' : null,
        message: `Enter a name for the environment variable that will be used to determine if the app is running locally (Defaults to "TINA_PUBLIC_IS_LOCAL")`,
        initial: 'TINA_PUBLIC_IS_LOCAL',
      },
      // tina/config.ts
      ...generatedFileOverwritePrompt({
        condition: (_) => true,
        configName: 'Config',
        generatedFile: env.generatedFiles['config'],
      }),
      // tina/database.ts
      ...generatedFileOverwritePrompt({
        condition: (answers) => !!answers.dataLayer,
        configName: 'Database',
        generatedFile: env.generatedFiles['database'],
      }),
      // tina/auth.ts
      ...generatedFileOverwritePrompt({
        condition: (answers) => !!answers.nextAuthProvider,
        configName: 'Auth',
        generatedFile: env.generatedFiles['auth'],
      }),
      // pages/api/gql.ts
      ...generatedFileOverwritePrompt({
        condition: (answers) => !!answers.dataLayer,
        configName: 'GqlApiHandler',
        generatedFile: env.generatedFiles['gql-api-handler'],
      }),
      // pages/api/auth/[...nextauth].ts
      ...generatedFileOverwritePrompt({
        condition: (answers) => !!answers.nextAuthProvider,
        configName: 'NextAuthApiHandler',
        generatedFile: env.generatedFiles['next-auth-api-handler'],
      }),
      // pages/auth/signin.tsx
      ...generatedFileOverwritePrompt({
        condition: (answers) =>
          answers.nextAuthProvider === 'vercel-kv-credentials-provider',
        configName: 'VercelKVCredentialsProviderSignin',
        generatedFile:
          env.generatedFiles['vercel-kv-credentials-provider-signin'],
      }),
      // pages/auth/register.tsx
      ...generatedFileOverwritePrompt({
        condition: (answers) =>
          answers.nextAuthProvider === 'vercel-kv-credentials-provider',
        configName: 'VercelKVCredentialsProviderRegister',
        generatedFile:
          env.generatedFiles['vercel-kv-credentials-provider-register'],
      }),
      // pages/api/credentials/register.ts
      ...generatedFileOverwritePrompt({
        condition: (answers) =>
          answers.nextAuthProvider === 'vercel-kv-credentials-provider',
        configName: 'VercelKVCredentialsProviderRegisterApiHandler',
        generatedFile:
          env.generatedFiles[
            'vercel-kv-credentials-provider-register-api-handler'
          ],
      }),
      // tailwind.config.js
      ...generatedFileOverwritePrompt({
        condition: (answers) =>
          answers.nextAuthProvider === 'vercel-kv-credentials-provider',
        configName: 'TailwindConfig',
        generatedFile: env.generatedFiles['tailwind-config'],
      }),
      // postcss.config.js
      ...generatedFileOverwritePrompt({
        condition: (answers) =>
          answers.nextAuthProvider === 'vercel-kv-credentials-provider',
        configName: 'PostcssConfig',
        generatedFile: env.generatedFiles['postcss-config'],
      }),
      {
        name: 'overwriteSampleContent',
        type: (_) => (env.sampleContentExists ? 'confirm' : null),
        message: `Found existing file at ${env.sampleContentPath}. Would you like to override?`,
      },
    ],
    promptOptions
  )

  if (config.framework.name === 'next') {
    config.publicFolder = 'public'
  } else if (config.framework.name === 'hugo') {
    config.publicFolder = 'static'
  }

  await writeTinaEnv(config)

  if (opts.debug) {
    console.log('Configuration:')
    console.log(JSON.stringify(config, null, 2))
  }

  return config
}

export default configure
