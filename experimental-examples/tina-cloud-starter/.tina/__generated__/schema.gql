# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  posts(relativePath: String): Posts!
  postsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostsFilter): PostsConnection!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GlobalFilter): GlobalConnection!
  authors(relativePath: String): Authors!
  authorsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AuthorsFilter): AuthorsConnection!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PagesFilter): PagesConnection!
}

input DocumentFilter {
  posts: PostsFilter
  global: GlobalFilter
  authors: AuthorsFilter
  pages: PagesFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Posts | Global | Authors | Pages

type PostsPageBlocks3NestedBlocksNestedBlock1ItemsNestedBlockc {
  title: String
}

type PostsPageBlocks3NestedBlocksNestedBlock1Items {
  nestedBlockc: [PostsPageBlocks3NestedBlocksNestedBlock1ItemsNestedBlockc]
}

union PostsPageBlocks3NestedBlocksNestedBlock1 = PostsPageBlocks3NestedBlocksNestedBlock1Items

type PostsPageBlocks3NestedBlocksNestedBlock2ItemsNestedBlockc {
  title: String
}

type PostsPageBlocks3NestedBlocksNestedBlock2Items {
  nestedBlockc: [PostsPageBlocks3NestedBlocksNestedBlock2ItemsNestedBlockc]
}

union PostsPageBlocks3NestedBlocksNestedBlock2 = PostsPageBlocks3NestedBlocksNestedBlock2Items

type PostsPageBlocks3NestedBlocks {
  nestedBlock1: [PostsPageBlocks3NestedBlocksNestedBlock1]
  nestedBlock2: [PostsPageBlocks3NestedBlocksNestedBlock2]
}

union PostsPageBlocks3 = PostsPageBlocks3NestedBlocks

union PostsAuthor = Authors

type Posts implements Node & Document {
  pageBlocks3: [PostsPageBlocks3]
  title: String!
  heroImg: String
  excerpt: JSON
  author: PostsAuthor
  date: String
  _body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PostsPageBlocks3NestedBlocksNestedBlock1ItemsNestedBlockcFilter {
  title: StringFilter
}

input PostsPageBlocks3NestedBlocksNestedBlock1ItemsFilter {
  nestedBlockc: PostsPageBlocks3NestedBlocksNestedBlock1ItemsNestedBlockcFilter
}

input PostsPageBlocks3NestedBlocksNestedBlock1Filter {
  items: PostsPageBlocks3NestedBlocksNestedBlock1ItemsFilter
}

input PostsPageBlocks3NestedBlocksNestedBlock2ItemsNestedBlockcFilter {
  title: StringFilter
}

input PostsPageBlocks3NestedBlocksNestedBlock2ItemsFilter {
  nestedBlockc: PostsPageBlocks3NestedBlocksNestedBlock2ItemsNestedBlockcFilter
}

input PostsPageBlocks3NestedBlocksNestedBlock2Filter {
  items: PostsPageBlocks3NestedBlocksNestedBlock2ItemsFilter
}

input PostsPageBlocks3NestedBlocksFilter {
  nestedBlock1: PostsPageBlocks3NestedBlocksNestedBlock1Filter
  nestedBlock2: PostsPageBlocks3NestedBlocksNestedBlock2Filter
}

input PostsPageBlocks3Filter {
  nestedBlocks: PostsPageBlocks3NestedBlocksFilter
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PostsAuthorFilter {
  authors: AuthorsFilter
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input Posts_bodyDateTimeFilter {
  format: StringFilter
}

input Posts_bodyBlockQuoteFilter {
  children: RichTextFilter
  authorName: StringFilter
}

input Posts_bodyNewsletterSignupFilter {
  children: RichTextFilter
  placeholder: StringFilter
  buttonText: StringFilter
  disclaimer: RichTextFilter
}

input Posts_bodyFilter {
  DateTime: Posts_bodyDateTimeFilter
  BlockQuote: Posts_bodyBlockQuoteFilter
  NewsletterSignup: Posts_bodyNewsletterSignupFilter
}

input PostsFilter {
  pageBlocks3: PostsPageBlocks3Filter
  title: StringFilter
  heroImg: ImageFilter
  excerpt: RichTextFilter
  author: PostsAuthorFilter
  date: DatetimeFilter
  _body: Posts_bodyFilter
}

type PostsConnectionEdges {
  cursor: String!
  node: Posts
}

type PostsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostsConnectionEdges]
}

type GlobalHeaderIcon {
  color: String
  style: String
  name: String
}

type GlobalHeaderNav {
  href: String
  label: String
}

type GlobalHeader {
  icon: GlobalHeaderIcon
  color: String
  nav: [GlobalHeaderNav]
}

type GlobalFooterSocial {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

type GlobalFooter {
  color: String
  social: GlobalFooterSocial
}

type GlobalTheme {
  color: String
  font: String
  icon: String
  darkMode: String
}

type Global implements Node & Document {
  header: GlobalHeader
  footer: GlobalFooter
  theme: GlobalTheme
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input GlobalHeaderIconFilter {
  color: StringFilter
  style: StringFilter
  name: StringFilter
}

input GlobalHeaderNavFilter {
  href: StringFilter
  label: StringFilter
}

input GlobalHeaderFilter {
  icon: GlobalHeaderIconFilter
  color: StringFilter
  nav: GlobalHeaderNavFilter
}

input GlobalFooterSocialFilter {
  facebook: StringFilter
  twitter: StringFilter
  instagram: StringFilter
  github: StringFilter
}

input GlobalFooterFilter {
  color: StringFilter
  social: GlobalFooterSocialFilter
}

input GlobalThemeFilter {
  color: StringFilter
  font: StringFilter
  icon: StringFilter
  darkMode: StringFilter
}

input GlobalFilter {
  header: GlobalHeaderFilter
  footer: GlobalFooterFilter
  theme: GlobalThemeFilter
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type Authors implements Node & Document {
  name: String!
  avatar: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AuthorsFilter {
  name: StringFilter
  avatar: StringFilter
}

type AuthorsConnectionEdges {
  cursor: String!
  node: Authors
}

type AuthorsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorsConnectionEdges]
}

type PagesBlocksHeroActions {
  label: String
  type: String
  icon: Boolean
  link: String
}

type PagesBlocksHeroImage {
  src: String
  alt: String
}

type PagesBlocksHero {
  tagline: String
  headline: String
  text: JSON
  actions: [PagesBlocksHeroActions]
  image: PagesBlocksHeroImage
  color: String
}

type PagesBlocksFeaturesItemsIcon {
  color: String
  style: String
  name: String
}

type PagesBlocksFeaturesItems {
  icon: PagesBlocksFeaturesItemsIcon
  title: String
  text: String
}

type PagesBlocksFeatures {
  items: [PagesBlocksFeaturesItems]
  color: String
}

type PagesBlocksContent {
  body: JSON
  color: String
}

type PagesBlocksTestimonial {
  quote: String
  author: String
  color: String
}

union PagesBlocks = PagesBlocksHero | PagesBlocksFeatures | PagesBlocksContent | PagesBlocksTestimonial

type Pages implements Node & Document {
  blocks: [PagesBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input PagesBlocksHeroActionsFilter {
  label: StringFilter
  type: StringFilter
  icon: BooleanFilter
  link: StringFilter
}

input PagesBlocksHeroImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input PagesBlocksHeroFilter {
  tagline: StringFilter
  headline: StringFilter
  text: RichTextFilter
  actions: PagesBlocksHeroActionsFilter
  image: PagesBlocksHeroImageFilter
  color: StringFilter
}

input PagesBlocksFeaturesItemsIconFilter {
  color: StringFilter
  style: StringFilter
  name: StringFilter
}

input PagesBlocksFeaturesItemsFilter {
  icon: PagesBlocksFeaturesItemsIconFilter
  title: StringFilter
  text: StringFilter
}

input PagesBlocksFeaturesFilter {
  items: PagesBlocksFeaturesItemsFilter
  color: StringFilter
}

input PagesBlocksContentFilter {
  body: RichTextFilter
  color: StringFilter
}

input PagesBlocksTestimonialFilter {
  quote: StringFilter
  author: StringFilter
  color: StringFilter
}

input PagesBlocksFilter {
  hero: PagesBlocksHeroFilter
  features: PagesBlocksFeaturesFilter
  content: PagesBlocksContentFilter
  testimonial: PagesBlocksTestimonialFilter
}

input PagesFilter {
  blocks: PagesBlocksFilter
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePosts(relativePath: String!, params: PostsMutation!): Posts!
  createPosts(relativePath: String!, params: PostsMutation!): Posts!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
  updateAuthors(relativePath: String!, params: AuthorsMutation!): Authors!
  createAuthors(relativePath: String!, params: AuthorsMutation!): Authors!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
}

input DocumentMutation {
  posts: PostsMutation
  global: GlobalMutation
  authors: AuthorsMutation
  pages: PagesMutation
}

input PostsPageBlocks3NestedBlocksNestedBlock1ItemsNestedBlockcMutation {
  title: String
}

input PostsPageBlocks3NestedBlocksNestedBlock1ItemsMutation {
  nestedBlockc: [PostsPageBlocks3NestedBlocksNestedBlock1ItemsNestedBlockcMutation]
}

input PostsPageBlocks3NestedBlocksNestedBlock1Mutation {
  items: PostsPageBlocks3NestedBlocksNestedBlock1ItemsMutation
}

input PostsPageBlocks3NestedBlocksNestedBlock2ItemsNestedBlockcMutation {
  title: String
}

input PostsPageBlocks3NestedBlocksNestedBlock2ItemsMutation {
  nestedBlockc: [PostsPageBlocks3NestedBlocksNestedBlock2ItemsNestedBlockcMutation]
}

input PostsPageBlocks3NestedBlocksNestedBlock2Mutation {
  items: PostsPageBlocks3NestedBlocksNestedBlock2ItemsMutation
}

input PostsPageBlocks3NestedBlocksMutation {
  nestedBlock1: [PostsPageBlocks3NestedBlocksNestedBlock1Mutation]
  nestedBlock2: [PostsPageBlocks3NestedBlocksNestedBlock2Mutation]
}

input PostsPageBlocks3Mutation {
  nestedBlocks: PostsPageBlocks3NestedBlocksMutation
}

input PostsMutation {
  pageBlocks3: [PostsPageBlocks3Mutation]
  title: String
  heroImg: String
  excerpt: JSON
  author: String
  date: String
  _body: JSON
}

input GlobalHeaderIconMutation {
  color: String
  style: String
  name: String
}

input GlobalHeaderNavMutation {
  href: String
  label: String
}

input GlobalHeaderMutation {
  icon: GlobalHeaderIconMutation
  color: String
  nav: [GlobalHeaderNavMutation]
}

input GlobalFooterSocialMutation {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

input GlobalFooterMutation {
  color: String
  social: GlobalFooterSocialMutation
}

input GlobalThemeMutation {
  color: String
  font: String
  icon: String
  darkMode: String
}

input GlobalMutation {
  header: GlobalHeaderMutation
  footer: GlobalFooterMutation
  theme: GlobalThemeMutation
}

input AuthorsMutation {
  name: String
  avatar: String
}

input PagesBlocksHeroActionsMutation {
  label: String
  type: String
  icon: Boolean
  link: String
}

input PagesBlocksHeroImageMutation {
  src: String
  alt: String
}

input PagesBlocksHeroMutation {
  tagline: String
  headline: String
  text: JSON
  actions: [PagesBlocksHeroActionsMutation]
  image: PagesBlocksHeroImageMutation
  color: String
}

input PagesBlocksFeaturesItemsIconMutation {
  color: String
  style: String
  name: String
}

input PagesBlocksFeaturesItemsMutation {
  icon: PagesBlocksFeaturesItemsIconMutation
  title: String
  text: String
}

input PagesBlocksFeaturesMutation {
  items: [PagesBlocksFeaturesItemsMutation]
  color: String
}

input PagesBlocksContentMutation {
  body: JSON
  color: String
}

input PagesBlocksTestimonialMutation {
  quote: String
  author: String
  color: String
}

input PagesBlocksMutation {
  hero: PagesBlocksHeroMutation
  features: PagesBlocksFeaturesMutation
  content: PagesBlocksContentMutation
  testimonial: PagesBlocksTestimonialMutation
}

input PagesMutation {
  blocks: [PagesBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  