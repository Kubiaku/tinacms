# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String): PostConnection!
  author(relativePath: String): Author!
  authorConnection(before: String, after: String, first: Float, last: Float, sort: String): AuthorConnection!
  blockPage(relativePath: String): BlockPage!
  blockPageConnection(before: String, after: String, first: Float, last: Float, sort: String): BlockPageConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = Post | Author | BlockPage

union PostAuthor = Author

type Post implements Node & Document {
  title: String
  author: PostAuthor
  tags: [String]
  categories: [String]
  published: String
  featured: Boolean
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type AuthorSocial {
  platform: String
  handle: String
}

type Author implements Node & Document {
  name: String
  social: [AuthorSocial]
  bio: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type AuthorConnectionEdges {
  cursor: String!
  node: Author
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

type BlockPageBlocksHero {
  title: String
  description: String
}

union BlockPageBlocksBlockQuoteAuthor = Author

type BlockPageBlocksBlockQuote {
  message: JSON
  author: BlockPageBlocksBlockQuoteAuthor
}

union BlockPageBlocksFeaturedPostsBlogsItem = Post

type BlockPageBlocksFeaturedPostsBlogs {
  item: BlockPageBlocksFeaturedPostsBlogsItem
}

type BlockPageBlocksFeaturedPosts {
  header: String
  blogs: [BlockPageBlocksFeaturedPostsBlogs]
}

type BlockPageBlocksFeatureListItems {
  title: String
  description: String
}

type BlockPageBlocksFeatureList {
  title: String
  items: [BlockPageBlocksFeatureListItems]
}

type BlockPageBlocksSlideshowItems {
  title: String
  url: String
}

type BlockPageBlocksSlideshow {
  title: String
  items: [BlockPageBlocksSlideshowItems]
}

union BlockPageBlocks = BlockPageBlocksHero | BlockPageBlocksBlockQuote | BlockPageBlocksFeaturedPosts | BlockPageBlocksFeatureList | BlockPageBlocksSlideshow

type BlockPage implements Node & Document {
  title: String
  blocks: [BlockPageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type BlockPageConnectionEdges {
  cursor: String!
  node: BlockPage
}

type BlockPageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BlockPageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateAuthor(relativePath: String!, params: AuthorMutation!): Author!
  createAuthor(relativePath: String!, params: AuthorMutation!): Author!
  updateBlockPage(relativePath: String!, params: BlockPageMutation!): BlockPage!
  createBlockPage(relativePath: String!, params: BlockPageMutation!): BlockPage!
}

input DocumentMutation {
  post: PostMutation
  author: AuthorMutation
  blockPage: BlockPageMutation
}

input PostMutation {
  title: String
  author: String
  tags: [String]
  categories: [String]
  published: String
  featured: Boolean
  body: JSON
}

input AuthorSocialMutation {
  platform: String
  handle: String
}

input AuthorMutation {
  name: String
  social: [AuthorSocialMutation]
  bio: JSON
}

input BlockPageBlocksHeroMutation {
  title: String
  description: String
}

input BlockPageBlocksBlockQuoteMutation {
  message: JSON
  author: String
}

input BlockPageBlocksFeaturedPostsBlogsMutation {
  item: String
}

input BlockPageBlocksFeaturedPostsMutation {
  header: String
  blogs: [BlockPageBlocksFeaturedPostsBlogsMutation]
}

input BlockPageBlocksFeatureListItemsMutation {
  title: String
  description: String
}

input BlockPageBlocksFeatureListMutation {
  title: String
  items: [BlockPageBlocksFeatureListItemsMutation]
}

input BlockPageBlocksSlideshowItemsMutation {
  title: String
  url: String
}

input BlockPageBlocksSlideshowMutation {
  title: String
  items: [BlockPageBlocksSlideshowItemsMutation]
}

input BlockPageBlocksMutation {
  hero: BlockPageBlocksHeroMutation
  blockQuote: BlockPageBlocksBlockQuoteMutation
  featuredPosts: BlockPageBlocksFeaturedPostsMutation
  featureList: BlockPageBlocksFeatureListMutation
  slideshow: BlockPageBlocksSlideshowMutation
}

input BlockPageMutation {
  title: String
  blocks: [BlockPageBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  