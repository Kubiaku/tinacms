# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getThemeDocument(relativePath: String): ThemeDocument!
  getThemeList(before: String, after: String, first: Int, last: Int): ThemeConnection!
  getPageDocument(relativePath: String): PageDocument!
  getPageList(before: String, after: String, first: Int, last: Int): PageConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = ThemeDocument | PageDocument

type Theme {
  color: String
  btnStyle: String
}

type ThemeDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Theme!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ThemeConnectionEdges {
  cursor: String
  node: ThemeDocument
}

type ThemeConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [ThemeConnectionEdges]
}

type PageNavWordmarkIcon {
  color: String
  name: String
  style: String
}

type PageNavWordmark {
  icon: PageNavWordmarkIcon
  name: String
}

type PageNavItems {
  label: String
  link: String
}

type PageNav {
  wordmark: PageNavWordmark
  items: [PageNavItems]
}

type PageBlocksHeroString {
  color: String
}

type PageBlocksHeroImage {
  src: String
  alt: String
}

type PageBlocksHeroActions {
  label: String
  type: String
  icon: Boolean
}

type PageBlocksHeroStyle {
  color: String
}

type PageBlocksHero {
  tagline: String
  headline: String
  paragraph: String
  string: PageBlocksHeroString
  image: PageBlocksHeroImage
  actions: [PageBlocksHeroActions]
  style: PageBlocksHeroStyle
}

type PageBlocksTestimonialStyle {
  color: String
}

type PageBlocksTestimonial {
  quote: String
  author: String
  style: PageBlocksTestimonialStyle
}

type PageBlocksFeaturesItemsIcon {
  color: String
  name: String
  style: String
}

type PageBlocksFeaturesItemsActions {
  label: String
  type: String
  icon: Boolean
}

type PageBlocksFeaturesItems {
  icon: PageBlocksFeaturesItemsIcon
  title: String
  text: String
  actions: [PageBlocksFeaturesItemsActions]
}

type PageBlocksFeaturesStyle {
  color: String
}

type PageBlocksFeatures {
  items: [PageBlocksFeaturesItems]
  style: PageBlocksFeaturesStyle
}

union PageBlocks = PageBlocksHero | PageBlocksTestimonial | PageBlocksFeatures

type PageNavlistNavItems {
  label: String
  link: String
}

type PageNavlistNav {
  title: String
  items: [PageNavlistNavItems]
}

union PageNavlist = PageNavlistNav

type PageFooterSocial {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

type PageFooter {
  social: PageFooterSocial
}

type Page {
  nav: PageNav
  blocks: [PageBlocks]
  navlist: [PageNavlist]
  footer: PageFooter
}

type PageDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Page!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PageConnectionEdges {
  cursor: String
  node: PageDocument
}

type PageConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String!, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateThemeDocument(relativePath: String!, params: ThemeMutation!): ThemeDocument!
  updatePageDocument(relativePath: String!, params: PageMutation!): PageDocument!
}

input DocumentMutation {
  theme: ThemeMutation
  page: PageMutation
}

input ThemeMutation {
  color: String
  btnStyle: String
}

input PageNavWordmarkIconMutation {
  color: String
  name: String
  style: String
}

input PageNavWordmarkMutation {
  icon: PageNavWordmarkIconMutation
  name: String
}

input PageNavItemsMutation {
  label: String
  link: String
}

input PageNavMutation {
  wordmark: PageNavWordmarkMutation
  items: [PageNavItemsMutation]
}

input PageBlocksHeroStringMutation {
  color: String
}

input PageBlocksHeroImageMutation {
  src: String
  alt: String
}

input PageBlocksHeroActionsMutation {
  label: String
  type: String
  icon: Boolean
}

input PageBlocksHeroStyleMutation {
  color: String
}

input PageBlocksHeroMutation {
  tagline: String
  headline: String
  paragraph: String
  string: PageBlocksHeroStringMutation
  image: PageBlocksHeroImageMutation
  actions: [PageBlocksHeroActionsMutation]
  style: PageBlocksHeroStyleMutation
}

input PageBlocksTestimonialStyleMutation {
  color: String
}

input PageBlocksTestimonialMutation {
  quote: String
  author: String
  style: PageBlocksTestimonialStyleMutation
}

input PageBlocksFeaturesItemsIconMutation {
  color: String
  name: String
  style: String
}

input PageBlocksFeaturesItemsActionsMutation {
  label: String
  type: String
  icon: Boolean
}

input PageBlocksFeaturesItemsMutation {
  icon: PageBlocksFeaturesItemsIconMutation
  title: String
  text: String
  actions: [PageBlocksFeaturesItemsActionsMutation]
}

input PageBlocksFeaturesStyleMutation {
  color: String
}

input PageBlocksFeaturesMutation {
  items: [PageBlocksFeaturesItemsMutation]
  style: PageBlocksFeaturesStyleMutation
}

input PageBlocksMutation {
  hero: PageBlocksHeroMutation
  testimonial: PageBlocksTestimonialMutation
  features: PageBlocksFeaturesMutation
}

input PageNavlistNavItemsMutation {
  label: String
  link: String
}

input PageNavlistNavMutation {
  title: String
  items: [PageNavlistNavItemsMutation]
}

input PageNavlistMutation {
  nav: PageNavlistNavMutation
}

input PageFooterSocialMutation {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

input PageFooterMutation {
  social: PageFooterSocialMutation
}

input PageMutation {
  nav: PageNavMutation
  blocks: [PageBlocksMutation]
  navlist: [PageNavlistMutation]
  footer: PageFooterMutation
}

schema {
  query: Query
  mutation: Mutation
}
  