{"ast":null,"code":"// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina\nimport { gql } from 'tinacms';\nexport const LayoutQueryFragmentFragmentDoc = gql`\n    fragment LayoutQueryFragment on Query {\n  getGlobalDocument(relativePath: \"index.json\") {\n    data {\n      header {\n        icon {\n          name\n          color\n          style\n        }\n        color\n        nav {\n          href\n          label\n        }\n      }\n      footer {\n        color\n        social {\n          facebook\n          twitter\n          instagram\n          github\n        }\n      }\n      theme {\n        color\n        icon\n        font\n        darkMode\n      }\n    }\n  }\n}\n    `;\nexport const PostsPartsFragmentDoc = gql`\n    fragment PostsParts on Posts {\n  _body\n  title\n  author {\n    ... on Document {\n      id\n    }\n  }\n  date\n  heroImg\n  excerpt\n}\n    `;\nexport const GlobalPartsFragmentDoc = gql`\n    fragment GlobalParts on Global {\n  header {\n    __typename\n    icon {\n      __typename\n      color\n      style\n      name\n    }\n    color\n    nav {\n      __typename\n      href\n      label\n    }\n  }\n  footer {\n    __typename\n    color\n    social {\n      __typename\n      facebook\n      twitter\n      instagram\n      github\n    }\n  }\n  theme {\n    __typename\n    color\n    font\n    icon\n    darkMode\n  }\n}\n    `;\nexport const AuthorsPartsFragmentDoc = gql`\n    fragment AuthorsParts on Authors {\n  name\n  avatar\n}\n    `;\nexport const PagesPartsFragmentDoc = gql`\n    fragment PagesParts on Pages {\n  blocks {\n    __typename\n    ... on PagesBlocksHero {\n      tagline\n      headline\n      text\n      actions {\n        __typename\n        label\n        type\n        icon\n        link\n      }\n      image {\n        __typename\n        src\n        alt\n      }\n      color\n    }\n    ... on PagesBlocksFeatures {\n      items {\n        __typename\n        icon {\n          __typename\n          color\n          style\n          name\n        }\n        title\n        text\n      }\n      color\n    }\n    ... on PagesBlocksContent {\n      body\n      color\n    }\n    ... on PagesBlocksTestimonial {\n      quote\n      author\n      color\n    }\n  }\n}\n    `;\nexport const PageQueryDocument = gql`\n    query PageQuery {\n  ...LayoutQueryFragment\n  getPostsList {\n    edges {\n      node {\n        id\n        values\n        data {\n          author {\n            ... on AuthorsDocument {\n              data {\n                ...AuthorsParts\n              }\n            }\n          }\n        }\n        sys {\n          filename\n        }\n      }\n    }\n  }\n}\n    ${LayoutQueryFragmentFragmentDoc}\n${AuthorsPartsFragmentDoc}`;\nexport const ContentQueryDocument = gql`\n    query ContentQuery($relativePath: String!) {\n  ...LayoutQueryFragment\n  getPagesDocument(relativePath: $relativePath) {\n    data {\n      ...PagesParts\n    }\n  }\n}\n    ${LayoutQueryFragmentFragmentDoc}\n${PagesPartsFragmentDoc}`;\nexport const BlogPostQueryDocument = gql`\n    query BlogPostQuery($relativePath: String!) {\n  ...LayoutQueryFragment\n  getPostsDocument(relativePath: $relativePath) {\n    data {\n      ...PostsParts\n      author {\n        ... on AuthorsDocument {\n          data {\n            name\n            avatar\n          }\n        }\n      }\n    }\n  }\n}\n    ${LayoutQueryFragmentFragmentDoc}\n${PostsPartsFragmentDoc}`;\nexport const GetPostsDocumentDocument = gql`\n    query getPostsDocument($relativePath: String!) {\n  getPostsDocument(relativePath: $relativePath) {\n    sys {\n      filename\n      basename\n      breadcrumbs\n      path\n      relativePath\n      extension\n    }\n    id\n    data {\n      ...PostsParts\n    }\n  }\n}\n    ${PostsPartsFragmentDoc}`;\nexport const GetPostsListDocument = gql`\n    query getPostsList {\n  getPostsList {\n    totalCount\n    edges {\n      node {\n        id\n        sys {\n          filename\n          basename\n          breadcrumbs\n          path\n          relativePath\n          extension\n        }\n        data {\n          ...PostsParts\n        }\n      }\n    }\n  }\n}\n    ${PostsPartsFragmentDoc}`;\nexport const GetGlobalDocumentDocument = gql`\n    query getGlobalDocument($relativePath: String!) {\n  getGlobalDocument(relativePath: $relativePath) {\n    sys {\n      filename\n      basename\n      breadcrumbs\n      path\n      relativePath\n      extension\n    }\n    id\n    data {\n      ...GlobalParts\n    }\n  }\n}\n    ${GlobalPartsFragmentDoc}`;\nexport const GetGlobalListDocument = gql`\n    query getGlobalList {\n  getGlobalList {\n    totalCount\n    edges {\n      node {\n        id\n        sys {\n          filename\n          basename\n          breadcrumbs\n          path\n          relativePath\n          extension\n        }\n        data {\n          ...GlobalParts\n        }\n      }\n    }\n  }\n}\n    ${GlobalPartsFragmentDoc}`;\nexport const GetAuthorsDocumentDocument = gql`\n    query getAuthorsDocument($relativePath: String!) {\n  getAuthorsDocument(relativePath: $relativePath) {\n    sys {\n      filename\n      basename\n      breadcrumbs\n      path\n      relativePath\n      extension\n    }\n    id\n    data {\n      ...AuthorsParts\n    }\n  }\n}\n    ${AuthorsPartsFragmentDoc}`;\nexport const GetAuthorsListDocument = gql`\n    query getAuthorsList {\n  getAuthorsList {\n    totalCount\n    edges {\n      node {\n        id\n        sys {\n          filename\n          basename\n          breadcrumbs\n          path\n          relativePath\n          extension\n        }\n        data {\n          ...AuthorsParts\n        }\n      }\n    }\n  }\n}\n    ${AuthorsPartsFragmentDoc}`;\nexport const GetPagesDocumentDocument = gql`\n    query getPagesDocument($relativePath: String!) {\n  getPagesDocument(relativePath: $relativePath) {\n    sys {\n      filename\n      basename\n      breadcrumbs\n      path\n      relativePath\n      extension\n    }\n    id\n    data {\n      ...PagesParts\n    }\n  }\n}\n    ${PagesPartsFragmentDoc}`;\nexport const GetPagesListDocument = gql`\n    query getPagesList {\n  getPagesList {\n    totalCount\n    edges {\n      node {\n        id\n        sys {\n          filename\n          basename\n          breadcrumbs\n          path\n          relativePath\n          extension\n        }\n        data {\n          ...PagesParts\n        }\n      }\n    }\n  }\n}\n    ${PagesPartsFragmentDoc}`;\nexport function getSdk(requester) {\n  return {\n    PageQuery(variables, options) {\n      return requester(PageQueryDocument, variables, options);\n    },\n\n    ContentQuery(variables, options) {\n      return requester(ContentQueryDocument, variables, options);\n    },\n\n    BlogPostQuery(variables, options) {\n      return requester(BlogPostQueryDocument, variables, options);\n    },\n\n    getPostsDocument(variables, options) {\n      return requester(GetPostsDocumentDocument, variables, options);\n    },\n\n    getPostsList(variables, options) {\n      return requester(GetPostsListDocument, variables, options);\n    },\n\n    getGlobalDocument(variables, options) {\n      return requester(GetGlobalDocumentDocument, variables, options);\n    },\n\n    getGlobalList(variables, options) {\n      return requester(GetGlobalListDocument, variables, options);\n    },\n\n    getAuthorsDocument(variables, options) {\n      return requester(GetAuthorsDocumentDocument, variables, options);\n    },\n\n    getAuthorsList(variables, options) {\n      return requester(GetAuthorsListDocument, variables, options);\n    },\n\n    getPagesDocument(variables, options) {\n      return requester(GetPagesDocumentDocument, variables, options);\n    },\n\n    getPagesList(variables, options) {\n      return requester(GetPagesListDocument, variables, options);\n    }\n\n  };\n}\n// TinaSDK generated code\nimport { getStaticPropsForTina } from 'tinacms';\n\nconst requester = async (doc, vars, _options) => {\n  // const data = await tinaClient.request(doc, { variables: vars }); \n  const res = await await getStaticPropsForTina({\n    query: doc,\n    variables: vars\n  });\n  return res;\n};\n/**\n * @experimental this class can be used but may change in the future\n **/\n\n\nexport const ExperimentalGetTinaClient = () => getSdk(requester);","map":{"version":3,"sources":["/Users/jeffsee/code/tinacms/examples/tina-cloud-starter/.tina/__generated__/types.ts"],"names":["gql","LayoutQueryFragmentFragmentDoc","PostsPartsFragmentDoc","GlobalPartsFragmentDoc","AuthorsPartsFragmentDoc","PagesPartsFragmentDoc","PageQueryDocument","ContentQueryDocument","BlogPostQueryDocument","GetPostsDocumentDocument","GetPostsListDocument","GetGlobalDocumentDocument","GetGlobalListDocument","GetAuthorsDocumentDocument","GetAuthorsListDocument","GetPagesDocumentDocument","GetPagesListDocument","getSdk","requester","PageQuery","variables","options","ContentQuery","BlogPostQuery","getPostsDocument","getPostsList","getGlobalDocument","getGlobalList","getAuthorsDocument","getAuthorsList","getPagesDocument","getPagesList","getStaticPropsForTina","doc","vars","_options","res","query","ExperimentalGetTinaClient"],"mappings":"AAAA;AACA,SAASA,GAAT,QAAoB,SAApB;AAq2BA,OAAO,MAAMC,8BAA8B,GAAGD,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAlCO;AAmCP,OAAO,MAAME,qBAAqB,GAAGF,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAbO;AAcP,OAAO,MAAMG,sBAAsB,GAAGH,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KApCO;AAqCP,OAAO,MAAMI,uBAAuB,GAAGJ,GAAI;AAC3C;AACA;AACA;AACA;AACA,KALO;AAMP,OAAO,MAAMK,qBAAqB,GAAGL,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA/CO;AAgDP,OAAO,MAAMM,iBAAiB,GAAGN,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,8BAA+B;AACrC,EAAEG,uBAAwB,EAzBnB;AA0BP,OAAO,MAAMG,oBAAoB,GAAGP,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,8BAA+B;AACrC,EAAEI,qBAAsB,EAVjB;AAWP,OAAO,MAAMG,qBAAqB,GAAGR,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,8BAA+B;AACrC,EAAEC,qBAAsB,EAlBjB;AAmBP,OAAO,MAAMO,wBAAwB,GAAGT,GAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,qBAAsB,EAjBrB;AAkBP,OAAO,MAAMQ,oBAAoB,GAAGV,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,qBAAsB,EAtBrB;AAuBP,OAAO,MAAMS,yBAAyB,GAAGX,GAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,sBAAuB,EAjBtB;AAkBP,OAAO,MAAMS,qBAAqB,GAAGZ,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,sBAAuB,EAtBtB;AAuBP,OAAO,MAAMU,0BAA0B,GAAGb,GAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,uBAAwB,EAjBvB;AAkBP,OAAO,MAAMU,sBAAsB,GAAGd,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,uBAAwB,EAtBvB;AAuBP,OAAO,MAAMW,wBAAwB,GAAGf,GAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,qBAAsB,EAjBrB;AAkBP,OAAO,MAAMW,oBAAoB,GAAGhB,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,qBAAsB,EAtBrB;AAwBL,OAAO,SAASY,MAAT,CAAmBC,SAAnB,EAA4C;AACjD,SAAO;AACLC,IAAAA,SAAS,CAACC,SAAD,EAAsCC,OAAtC,EAAuI;AAC9I,aAAOH,SAAS,CAAqGZ,iBAArG,EAAwHc,SAAxH,EAAmIC,OAAnI,CAAhB;AACD,KAHI;;AAIPC,IAAAA,YAAY,CAACF,SAAD,EAAwCC,OAAxC,EAA+I;AACvJ,aAAOH,SAAS,CAA8GX,oBAA9G,EAAoIa,SAApI,EAA+IC,OAA/I,CAAhB;AACD,KANI;;AAOPE,IAAAA,aAAa,CAACH,SAAD,EAAyCC,OAAzC,EAAkJ;AAC3J,aAAOH,SAAS,CAAiHV,qBAAjH,EAAwIY,SAAxI,EAAmJC,OAAnJ,CAAhB;AACD,KATI;;AAUPG,IAAAA,gBAAgB,CAACJ,SAAD,EAA4CC,OAA5C,EAA2J;AACvK,aAAOH,SAAS,CAA0HT,wBAA1H,EAAoJW,SAApJ,EAA+JC,OAA/J,CAAhB;AACD,KAZI;;AAaPI,IAAAA,YAAY,CAACL,SAAD,EAAyCC,OAAzC,EAAgJ;AACxJ,aAAOH,SAAS,CAA8GR,oBAA9G,EAAoIU,SAApI,EAA+IC,OAA/I,CAAhB;AACD,KAfI;;AAgBPK,IAAAA,iBAAiB,CAACN,SAAD,EAA6CC,OAA7C,EAA8J;AAC3K,aAAOH,SAAS,CAA6HP,yBAA7H,EAAwJS,SAAxJ,EAAmKC,OAAnK,CAAhB;AACD,KAlBI;;AAmBPM,IAAAA,aAAa,CAACP,SAAD,EAA0CC,OAA1C,EAAmJ;AAC5J,aAAOH,SAAS,CAAiHN,qBAAjH,EAAwIQ,SAAxI,EAAmJC,OAAnJ,CAAhB;AACD,KArBI;;AAsBPO,IAAAA,kBAAkB,CAACR,SAAD,EAA8CC,OAA9C,EAAiK;AAC/K,aAAOH,SAAS,CAAgIL,0BAAhI,EAA4JO,SAA5J,EAAuKC,OAAvK,CAAhB;AACD,KAxBI;;AAyBPQ,IAAAA,cAAc,CAACT,SAAD,EAA2CC,OAA3C,EAAsJ;AAChK,aAAOH,SAAS,CAAoHJ,sBAApH,EAA4IM,SAA5I,EAAuJC,OAAvJ,CAAhB;AACD,KA3BI;;AA4BPS,IAAAA,gBAAgB,CAACV,SAAD,EAA4CC,OAA5C,EAA2J;AACvK,aAAOH,SAAS,CAA0HH,wBAA1H,EAAoJK,SAApJ,EAA+JC,OAA/J,CAAhB;AACD,KA9BI;;AA+BPU,IAAAA,YAAY,CAACX,SAAD,EAAyCC,OAAzC,EAAgJ;AACxJ,aAAOH,SAAS,CAA8GF,oBAA9G,EAAoII,SAApI,EAA+IC,OAA/I,CAAhB;AACD;;AAjCI,GAAP;AAmCD;AAGH;AACA,SAASW,qBAAT,QAAsC,SAAtC;;AACA,MAAMd,SAAgE,GAAG,OACvEe,GADuE,EAEvEC,IAFuE,EAGvEC,QAHuE,KAIpE;AACH;AACA,QAAMC,GAAG,GAAG,MAAM,MAAMJ,qBAAqB,CAAC;AAACK,IAAAA,KAAK,EAAEJ,GAAR;AAAab,IAAAA,SAAS,EAAEc;AAAxB,GAAD,CAA7C;AACA,SAAOE,GAAP;AACD,CARD;AAUA;AACA;AACA;;;AACA,OAAO,MAAME,yBAAyB,GAAG,MAAIrB,MAAM,CAACC,SAAD,CAA5C","sourcesContent":["// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina\nimport { gql } from 'tinacms';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** References another document, used as a foreign key */\n  Reference: any;\n  JSON: any;\n};\n\nexport type SystemInfo = {\n  __typename?: 'SystemInfo';\n  filename: Scalars['String'];\n  basename: Scalars['String'];\n  breadcrumbs: Array<Scalars['String']>;\n  path: Scalars['String'];\n  relativePath: Scalars['String'];\n  extension: Scalars['String'];\n  template: Scalars['String'];\n  collection: Collection;\n};\n\n\nexport type SystemInfoBreadcrumbsArgs = {\n  excludeExtension?: Maybe<Scalars['Boolean']>;\n};\n\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  hasPreviousPage: Scalars['Boolean'];\n  hasNextPage: Scalars['Boolean'];\n  startCursor: Scalars['String'];\n  endCursor: Scalars['String'];\n};\n\nexport type Node = {\n  id: Scalars['ID'];\n};\n\nexport type Document = {\n  sys?: Maybe<SystemInfo>;\n  id: Scalars['ID'];\n  form: Scalars['JSON'];\n  values: Scalars['JSON'];\n};\n\n/** A relay-compliant pagination connection */\nexport type Connection = {\n  totalCount: Scalars['Int'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getCollection: Collection;\n  getCollections: Array<Collection>;\n  node: Node;\n  getDocument: DocumentNode;\n  getDocumentList: DocumentConnection;\n  getDocumentFields: Scalars['JSON'];\n  getPostsDocument: PostsDocument;\n  getPostsList: PostsConnection;\n  getGlobalDocument: GlobalDocument;\n  getGlobalList: GlobalConnection;\n  getAuthorsDocument: AuthorsDocument;\n  getAuthorsList: AuthorsConnection;\n  getPagesDocument: PagesDocument;\n  getPagesList: PagesConnection;\n};\n\n\nexport type QueryGetCollectionArgs = {\n  collection?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryNodeArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryGetDocumentArgs = {\n  collection?: Maybe<Scalars['String']>;\n  relativePath?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryGetDocumentListArgs = {\n  before?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<DocumentFilter>;\n};\n\n\nexport type QueryGetPostsDocumentArgs = {\n  relativePath?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryGetPostsListArgs = {\n  before?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<PostsFilter>;\n};\n\n\nexport type QueryGetGlobalDocumentArgs = {\n  relativePath?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryGetGlobalListArgs = {\n  before?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<GlobalFilter>;\n};\n\n\nexport type QueryGetAuthorsDocumentArgs = {\n  relativePath?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryGetAuthorsListArgs = {\n  before?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<AuthorsFilter>;\n};\n\n\nexport type QueryGetPagesDocumentArgs = {\n  relativePath?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryGetPagesListArgs = {\n  before?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<PagesFilter>;\n};\n\nexport type StringFilter = {\n  startsWith?: Maybe<Scalars['String']>;\n  eq?: Maybe<Scalars['String']>;\n  exists?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Posts_BodyDateTimeFilter = {\n  format?: Maybe<StringFilter>;\n};\n\nexport type Posts_BodyBlockQuoteFilter = {\n  authorName?: Maybe<StringFilter>;\n};\n\nexport type Posts_BodyNewsletterSignupFilter = {\n  placeholder?: Maybe<StringFilter>;\n  buttonText?: Maybe<StringFilter>;\n};\n\nexport type Posts_BodyFilter = {\n  DateTime?: Maybe<Posts_BodyDateTimeFilter>;\n  BlockQuote?: Maybe<Posts_BodyBlockQuoteFilter>;\n  NewsletterSignup?: Maybe<Posts_BodyNewsletterSignupFilter>;\n};\n\nexport type AuthorsFilter = {\n  name?: Maybe<StringFilter>;\n  avatar?: Maybe<StringFilter>;\n};\n\nexport type PostsAuthorFilter = {\n  authors?: Maybe<AuthorsFilter>;\n};\n\nexport type DatetimeFilter = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  eq?: Maybe<Scalars['String']>;\n  exists?: Maybe<Scalars['Boolean']>;\n};\n\nexport type ImageFilter = {\n  startsWith?: Maybe<Scalars['String']>;\n  eq?: Maybe<Scalars['String']>;\n  exists?: Maybe<Scalars['Boolean']>;\n};\n\nexport type PostsFilter = {\n  _body?: Maybe<Posts_BodyFilter>;\n  title?: Maybe<StringFilter>;\n  author?: Maybe<PostsAuthorFilter>;\n  date?: Maybe<DatetimeFilter>;\n  heroImg?: Maybe<ImageFilter>;\n  excerpt?: Maybe<StringFilter>;\n};\n\nexport type GlobalHeaderIconFilter = {\n  color?: Maybe<StringFilter>;\n  style?: Maybe<StringFilter>;\n  name?: Maybe<StringFilter>;\n};\n\nexport type GlobalHeaderNavFilter = {\n  href?: Maybe<StringFilter>;\n  label?: Maybe<StringFilter>;\n};\n\nexport type GlobalHeaderFilter = {\n  icon?: Maybe<GlobalHeaderIconFilter>;\n  color?: Maybe<StringFilter>;\n  nav?: Maybe<GlobalHeaderNavFilter>;\n};\n\nexport type GlobalFooterSocialFilter = {\n  facebook?: Maybe<StringFilter>;\n  twitter?: Maybe<StringFilter>;\n  instagram?: Maybe<StringFilter>;\n  github?: Maybe<StringFilter>;\n};\n\nexport type GlobalFooterFilter = {\n  color?: Maybe<StringFilter>;\n  social?: Maybe<GlobalFooterSocialFilter>;\n};\n\nexport type GlobalThemeFilter = {\n  color?: Maybe<StringFilter>;\n  font?: Maybe<StringFilter>;\n  icon?: Maybe<StringFilter>;\n  darkMode?: Maybe<StringFilter>;\n};\n\nexport type GlobalFilter = {\n  header?: Maybe<GlobalHeaderFilter>;\n  footer?: Maybe<GlobalFooterFilter>;\n  theme?: Maybe<GlobalThemeFilter>;\n};\n\nexport type BooleanFilter = {\n  eq?: Maybe<Scalars['Boolean']>;\n  exists?: Maybe<Scalars['Boolean']>;\n};\n\nexport type PagesBlocksHeroActionsFilter = {\n  label?: Maybe<StringFilter>;\n  type?: Maybe<StringFilter>;\n  icon?: Maybe<BooleanFilter>;\n  link?: Maybe<StringFilter>;\n};\n\nexport type PagesBlocksHeroImageFilter = {\n  src?: Maybe<ImageFilter>;\n  alt?: Maybe<StringFilter>;\n};\n\nexport type PagesBlocksHeroFilter = {\n  tagline?: Maybe<StringFilter>;\n  headline?: Maybe<StringFilter>;\n  text?: Maybe<StringFilter>;\n  actions?: Maybe<PagesBlocksHeroActionsFilter>;\n  image?: Maybe<PagesBlocksHeroImageFilter>;\n  color?: Maybe<StringFilter>;\n};\n\nexport type PagesBlocksFeaturesItemsIconFilter = {\n  color?: Maybe<StringFilter>;\n  style?: Maybe<StringFilter>;\n  name?: Maybe<StringFilter>;\n};\n\nexport type PagesBlocksFeaturesItemsFilter = {\n  icon?: Maybe<PagesBlocksFeaturesItemsIconFilter>;\n  title?: Maybe<StringFilter>;\n  text?: Maybe<StringFilter>;\n};\n\nexport type PagesBlocksFeaturesFilter = {\n  items?: Maybe<PagesBlocksFeaturesItemsFilter>;\n  color?: Maybe<StringFilter>;\n};\n\nexport type PagesBlocksContentFilter = {\n  body?: Maybe<StringFilter>;\n  color?: Maybe<StringFilter>;\n};\n\nexport type PagesBlocksTestimonialFilter = {\n  quote?: Maybe<StringFilter>;\n  author?: Maybe<StringFilter>;\n  color?: Maybe<StringFilter>;\n};\n\nexport type PagesBlocksFilter = {\n  hero?: Maybe<PagesBlocksHeroFilter>;\n  features?: Maybe<PagesBlocksFeaturesFilter>;\n  content?: Maybe<PagesBlocksContentFilter>;\n  testimonial?: Maybe<PagesBlocksTestimonialFilter>;\n};\n\nexport type PagesFilter = {\n  blocks?: Maybe<PagesBlocksFilter>;\n};\n\nexport type DocumentFilter = {\n  posts?: Maybe<PostsFilter>;\n  global?: Maybe<GlobalFilter>;\n  authors?: Maybe<AuthorsFilter>;\n  pages?: Maybe<PagesFilter>;\n};\n\nexport type DocumentConnectionEdges = {\n  __typename?: 'DocumentConnectionEdges';\n  cursor?: Maybe<Scalars['String']>;\n  node?: Maybe<DocumentNode>;\n};\n\nexport type DocumentConnection = Connection & {\n  __typename?: 'DocumentConnection';\n  pageInfo?: Maybe<PageInfo>;\n  totalCount: Scalars['Int'];\n  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;\n};\n\nexport type Collection = {\n  __typename?: 'Collection';\n  name: Scalars['String'];\n  slug: Scalars['String'];\n  label: Scalars['String'];\n  path: Scalars['String'];\n  format?: Maybe<Scalars['String']>;\n  matches?: Maybe<Scalars['String']>;\n  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;\n  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;\n  documents: DocumentConnection;\n};\n\n\nexport type CollectionDocumentsArgs = {\n  before?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  filter?: Maybe<DocumentFilter>;\n};\n\nexport type DocumentNode = PostsDocument | GlobalDocument | AuthorsDocument | PagesDocument;\n\nexport type PostsAuthorDocument = AuthorsDocument;\n\nexport type Posts = {\n  __typename?: 'Posts';\n  _body?: Maybe<Scalars['JSON']>;\n  title?: Maybe<Scalars['String']>;\n  author?: Maybe<PostsAuthorDocument>;\n  date?: Maybe<Scalars['String']>;\n  heroImg?: Maybe<Scalars['String']>;\n  excerpt?: Maybe<Scalars['String']>;\n};\n\nexport type PostsDocument = Node & Document & {\n  __typename?: 'PostsDocument';\n  id: Scalars['ID'];\n  sys: SystemInfo;\n  data: Posts;\n  form: Scalars['JSON'];\n  values: Scalars['JSON'];\n  dataJSON: Scalars['JSON'];\n};\n\nexport type PostsConnectionEdges = {\n  __typename?: 'PostsConnectionEdges';\n  cursor?: Maybe<Scalars['String']>;\n  node?: Maybe<PostsDocument>;\n};\n\nexport type PostsConnection = Connection & {\n  __typename?: 'PostsConnection';\n  pageInfo?: Maybe<PageInfo>;\n  totalCount: Scalars['Int'];\n  edges?: Maybe<Array<Maybe<PostsConnectionEdges>>>;\n};\n\nexport type GlobalHeaderIcon = {\n  __typename?: 'GlobalHeaderIcon';\n  color?: Maybe<Scalars['String']>;\n  style?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type GlobalHeaderNav = {\n  __typename?: 'GlobalHeaderNav';\n  href?: Maybe<Scalars['String']>;\n  label?: Maybe<Scalars['String']>;\n};\n\nexport type GlobalHeader = {\n  __typename?: 'GlobalHeader';\n  icon?: Maybe<GlobalHeaderIcon>;\n  color?: Maybe<Scalars['String']>;\n  nav?: Maybe<Array<Maybe<GlobalHeaderNav>>>;\n};\n\nexport type GlobalFooterSocial = {\n  __typename?: 'GlobalFooterSocial';\n  facebook?: Maybe<Scalars['String']>;\n  twitter?: Maybe<Scalars['String']>;\n  instagram?: Maybe<Scalars['String']>;\n  github?: Maybe<Scalars['String']>;\n};\n\nexport type GlobalFooter = {\n  __typename?: 'GlobalFooter';\n  color?: Maybe<Scalars['String']>;\n  social?: Maybe<GlobalFooterSocial>;\n};\n\nexport type GlobalTheme = {\n  __typename?: 'GlobalTheme';\n  color?: Maybe<Scalars['String']>;\n  font?: Maybe<Scalars['String']>;\n  icon?: Maybe<Scalars['String']>;\n  darkMode?: Maybe<Scalars['String']>;\n};\n\nexport type Global = {\n  __typename?: 'Global';\n  header?: Maybe<GlobalHeader>;\n  footer?: Maybe<GlobalFooter>;\n  theme?: Maybe<GlobalTheme>;\n};\n\nexport type GlobalDocument = Node & Document & {\n  __typename?: 'GlobalDocument';\n  id: Scalars['ID'];\n  sys: SystemInfo;\n  data: Global;\n  form: Scalars['JSON'];\n  values: Scalars['JSON'];\n  dataJSON: Scalars['JSON'];\n};\n\nexport type GlobalConnectionEdges = {\n  __typename?: 'GlobalConnectionEdges';\n  cursor?: Maybe<Scalars['String']>;\n  node?: Maybe<GlobalDocument>;\n};\n\nexport type GlobalConnection = Connection & {\n  __typename?: 'GlobalConnection';\n  pageInfo?: Maybe<PageInfo>;\n  totalCount: Scalars['Int'];\n  edges?: Maybe<Array<Maybe<GlobalConnectionEdges>>>;\n};\n\nexport type Authors = {\n  __typename?: 'Authors';\n  name?: Maybe<Scalars['String']>;\n  avatar?: Maybe<Scalars['String']>;\n};\n\nexport type AuthorsDocument = Node & Document & {\n  __typename?: 'AuthorsDocument';\n  id: Scalars['ID'];\n  sys: SystemInfo;\n  data: Authors;\n  form: Scalars['JSON'];\n  values: Scalars['JSON'];\n  dataJSON: Scalars['JSON'];\n};\n\nexport type AuthorsConnectionEdges = {\n  __typename?: 'AuthorsConnectionEdges';\n  cursor?: Maybe<Scalars['String']>;\n  node?: Maybe<AuthorsDocument>;\n};\n\nexport type AuthorsConnection = Connection & {\n  __typename?: 'AuthorsConnection';\n  pageInfo?: Maybe<PageInfo>;\n  totalCount: Scalars['Int'];\n  edges?: Maybe<Array<Maybe<AuthorsConnectionEdges>>>;\n};\n\nexport type PagesBlocksHeroActions = {\n  __typename?: 'PagesBlocksHeroActions';\n  label?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  icon?: Maybe<Scalars['Boolean']>;\n  link?: Maybe<Scalars['String']>;\n};\n\nexport type PagesBlocksHeroImage = {\n  __typename?: 'PagesBlocksHeroImage';\n  src?: Maybe<Scalars['String']>;\n  alt?: Maybe<Scalars['String']>;\n};\n\nexport type PagesBlocksHero = {\n  __typename?: 'PagesBlocksHero';\n  tagline?: Maybe<Scalars['String']>;\n  headline?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  actions?: Maybe<Array<Maybe<PagesBlocksHeroActions>>>;\n  image?: Maybe<PagesBlocksHeroImage>;\n  color?: Maybe<Scalars['String']>;\n};\n\nexport type PagesBlocksFeaturesItemsIcon = {\n  __typename?: 'PagesBlocksFeaturesItemsIcon';\n  color?: Maybe<Scalars['String']>;\n  style?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type PagesBlocksFeaturesItems = {\n  __typename?: 'PagesBlocksFeaturesItems';\n  icon?: Maybe<PagesBlocksFeaturesItemsIcon>;\n  title?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n};\n\nexport type PagesBlocksFeatures = {\n  __typename?: 'PagesBlocksFeatures';\n  items?: Maybe<Array<Maybe<PagesBlocksFeaturesItems>>>;\n  color?: Maybe<Scalars['String']>;\n};\n\nexport type PagesBlocksContent = {\n  __typename?: 'PagesBlocksContent';\n  body?: Maybe<Scalars['String']>;\n  color?: Maybe<Scalars['String']>;\n};\n\nexport type PagesBlocksTestimonial = {\n  __typename?: 'PagesBlocksTestimonial';\n  quote?: Maybe<Scalars['String']>;\n  author?: Maybe<Scalars['String']>;\n  color?: Maybe<Scalars['String']>;\n};\n\nexport type PagesBlocks = PagesBlocksHero | PagesBlocksFeatures | PagesBlocksContent | PagesBlocksTestimonial;\n\nexport type Pages = {\n  __typename?: 'Pages';\n  blocks?: Maybe<Array<Maybe<PagesBlocks>>>;\n};\n\nexport type PagesDocument = Node & Document & {\n  __typename?: 'PagesDocument';\n  id: Scalars['ID'];\n  sys: SystemInfo;\n  data: Pages;\n  form: Scalars['JSON'];\n  values: Scalars['JSON'];\n  dataJSON: Scalars['JSON'];\n};\n\nexport type PagesConnectionEdges = {\n  __typename?: 'PagesConnectionEdges';\n  cursor?: Maybe<Scalars['String']>;\n  node?: Maybe<PagesDocument>;\n};\n\nexport type PagesConnection = Connection & {\n  __typename?: 'PagesConnection';\n  pageInfo?: Maybe<PageInfo>;\n  totalCount: Scalars['Int'];\n  edges?: Maybe<Array<Maybe<PagesConnectionEdges>>>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addPendingDocument: DocumentNode;\n  updateDocument: DocumentNode;\n  createDocument: DocumentNode;\n  updatePostsDocument: PostsDocument;\n  createPostsDocument: PostsDocument;\n  updateGlobalDocument: GlobalDocument;\n  createGlobalDocument: GlobalDocument;\n  updateAuthorsDocument: AuthorsDocument;\n  createAuthorsDocument: AuthorsDocument;\n  updatePagesDocument: PagesDocument;\n  createPagesDocument: PagesDocument;\n};\n\n\nexport type MutationAddPendingDocumentArgs = {\n  collection: Scalars['String'];\n  relativePath: Scalars['String'];\n  template?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationUpdateDocumentArgs = {\n  relativePath: Scalars['String'];\n  params: DocumentMutation;\n};\n\n\nexport type MutationCreateDocumentArgs = {\n  relativePath: Scalars['String'];\n  params: DocumentMutation;\n};\n\n\nexport type MutationUpdatePostsDocumentArgs = {\n  relativePath: Scalars['String'];\n  params: PostsMutation;\n};\n\n\nexport type MutationCreatePostsDocumentArgs = {\n  relativePath: Scalars['String'];\n  params: PostsMutation;\n};\n\n\nexport type MutationUpdateGlobalDocumentArgs = {\n  relativePath: Scalars['String'];\n  params: GlobalMutation;\n};\n\n\nexport type MutationCreateGlobalDocumentArgs = {\n  relativePath: Scalars['String'];\n  params: GlobalMutation;\n};\n\n\nexport type MutationUpdateAuthorsDocumentArgs = {\n  relativePath: Scalars['String'];\n  params: AuthorsMutation;\n};\n\n\nexport type MutationCreateAuthorsDocumentArgs = {\n  relativePath: Scalars['String'];\n  params: AuthorsMutation;\n};\n\n\nexport type MutationUpdatePagesDocumentArgs = {\n  relativePath: Scalars['String'];\n  params: PagesMutation;\n};\n\n\nexport type MutationCreatePagesDocumentArgs = {\n  relativePath: Scalars['String'];\n  params: PagesMutation;\n};\n\nexport type DocumentMutation = {\n  posts?: Maybe<PostsMutation>;\n  global?: Maybe<GlobalMutation>;\n  authors?: Maybe<AuthorsMutation>;\n  pages?: Maybe<PagesMutation>;\n};\n\nexport type PostsMutation = {\n  _body?: Maybe<Scalars['JSON']>;\n  title?: Maybe<Scalars['String']>;\n  author?: Maybe<Scalars['String']>;\n  date?: Maybe<Scalars['String']>;\n  heroImg?: Maybe<Scalars['String']>;\n  excerpt?: Maybe<Scalars['String']>;\n};\n\nexport type GlobalHeaderIconMutation = {\n  color?: Maybe<Scalars['String']>;\n  style?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type GlobalHeaderNavMutation = {\n  href?: Maybe<Scalars['String']>;\n  label?: Maybe<Scalars['String']>;\n};\n\nexport type GlobalHeaderMutation = {\n  icon?: Maybe<GlobalHeaderIconMutation>;\n  color?: Maybe<Scalars['String']>;\n  nav?: Maybe<Array<Maybe<GlobalHeaderNavMutation>>>;\n};\n\nexport type GlobalFooterSocialMutation = {\n  facebook?: Maybe<Scalars['String']>;\n  twitter?: Maybe<Scalars['String']>;\n  instagram?: Maybe<Scalars['String']>;\n  github?: Maybe<Scalars['String']>;\n};\n\nexport type GlobalFooterMutation = {\n  color?: Maybe<Scalars['String']>;\n  social?: Maybe<GlobalFooterSocialMutation>;\n};\n\nexport type GlobalThemeMutation = {\n  color?: Maybe<Scalars['String']>;\n  font?: Maybe<Scalars['String']>;\n  icon?: Maybe<Scalars['String']>;\n  darkMode?: Maybe<Scalars['String']>;\n};\n\nexport type GlobalMutation = {\n  header?: Maybe<GlobalHeaderMutation>;\n  footer?: Maybe<GlobalFooterMutation>;\n  theme?: Maybe<GlobalThemeMutation>;\n};\n\nexport type AuthorsMutation = {\n  name?: Maybe<Scalars['String']>;\n  avatar?: Maybe<Scalars['String']>;\n};\n\nexport type PagesBlocksHeroActionsMutation = {\n  label?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  icon?: Maybe<Scalars['Boolean']>;\n  link?: Maybe<Scalars['String']>;\n};\n\nexport type PagesBlocksHeroImageMutation = {\n  src?: Maybe<Scalars['String']>;\n  alt?: Maybe<Scalars['String']>;\n};\n\nexport type PagesBlocksHeroMutation = {\n  tagline?: Maybe<Scalars['String']>;\n  headline?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  actions?: Maybe<Array<Maybe<PagesBlocksHeroActionsMutation>>>;\n  image?: Maybe<PagesBlocksHeroImageMutation>;\n  color?: Maybe<Scalars['String']>;\n};\n\nexport type PagesBlocksFeaturesItemsIconMutation = {\n  color?: Maybe<Scalars['String']>;\n  style?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type PagesBlocksFeaturesItemsMutation = {\n  icon?: Maybe<PagesBlocksFeaturesItemsIconMutation>;\n  title?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n};\n\nexport type PagesBlocksFeaturesMutation = {\n  items?: Maybe<Array<Maybe<PagesBlocksFeaturesItemsMutation>>>;\n  color?: Maybe<Scalars['String']>;\n};\n\nexport type PagesBlocksContentMutation = {\n  body?: Maybe<Scalars['String']>;\n  color?: Maybe<Scalars['String']>;\n};\n\nexport type PagesBlocksTestimonialMutation = {\n  quote?: Maybe<Scalars['String']>;\n  author?: Maybe<Scalars['String']>;\n  color?: Maybe<Scalars['String']>;\n};\n\nexport type PagesBlocksMutation = {\n  hero?: Maybe<PagesBlocksHeroMutation>;\n  features?: Maybe<PagesBlocksFeaturesMutation>;\n  content?: Maybe<PagesBlocksContentMutation>;\n  testimonial?: Maybe<PagesBlocksTestimonialMutation>;\n};\n\nexport type PagesMutation = {\n  blocks?: Maybe<Array<Maybe<PagesBlocksMutation>>>;\n};\n\nexport type LayoutQueryFragmentFragment = { __typename?: 'Query', getGlobalDocument: { __typename?: 'GlobalDocument', data: { __typename?: 'Global', header?: Maybe<{ __typename?: 'GlobalHeader', color?: Maybe<string>, icon?: Maybe<{ __typename?: 'GlobalHeaderIcon', name?: Maybe<string>, color?: Maybe<string>, style?: Maybe<string> }>, nav?: Maybe<Array<Maybe<{ __typename?: 'GlobalHeaderNav', href?: Maybe<string>, label?: Maybe<string> }>>> }>, footer?: Maybe<{ __typename?: 'GlobalFooter', color?: Maybe<string>, social?: Maybe<{ __typename?: 'GlobalFooterSocial', facebook?: Maybe<string>, twitter?: Maybe<string>, instagram?: Maybe<string>, github?: Maybe<string> }> }>, theme?: Maybe<{ __typename?: 'GlobalTheme', color?: Maybe<string>, icon?: Maybe<string>, font?: Maybe<string>, darkMode?: Maybe<string> }> } } };\n\nexport type PageQueryQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type PageQueryQuery = { __typename?: 'Query', getPostsList: { __typename?: 'PostsConnection', edges?: Maybe<Array<Maybe<{ __typename?: 'PostsConnectionEdges', node?: Maybe<{ __typename?: 'PostsDocument', id: string, values: any, data: { __typename?: 'Posts', author?: Maybe<{ __typename?: 'AuthorsDocument', data: { __typename?: 'Authors', name?: Maybe<string>, avatar?: Maybe<string> } }> }, sys: { __typename?: 'SystemInfo', filename: string } }> }>>> }, getGlobalDocument: { __typename?: 'GlobalDocument', data: { __typename?: 'Global', header?: Maybe<{ __typename?: 'GlobalHeader', color?: Maybe<string>, icon?: Maybe<{ __typename?: 'GlobalHeaderIcon', name?: Maybe<string>, color?: Maybe<string>, style?: Maybe<string> }>, nav?: Maybe<Array<Maybe<{ __typename?: 'GlobalHeaderNav', href?: Maybe<string>, label?: Maybe<string> }>>> }>, footer?: Maybe<{ __typename?: 'GlobalFooter', color?: Maybe<string>, social?: Maybe<{ __typename?: 'GlobalFooterSocial', facebook?: Maybe<string>, twitter?: Maybe<string>, instagram?: Maybe<string>, github?: Maybe<string> }> }>, theme?: Maybe<{ __typename?: 'GlobalTheme', color?: Maybe<string>, icon?: Maybe<string>, font?: Maybe<string>, darkMode?: Maybe<string> }> } } };\n\nexport type ContentQueryQueryVariables = Exact<{\n  relativePath: Scalars['String'];\n}>;\n\n\nexport type ContentQueryQuery = { __typename?: 'Query', getPagesDocument: { __typename?: 'PagesDocument', data: { __typename?: 'Pages', blocks?: Maybe<Array<Maybe<{ __typename: 'PagesBlocksHero', tagline?: Maybe<string>, headline?: Maybe<string>, text?: Maybe<string>, color?: Maybe<string>, actions?: Maybe<Array<Maybe<{ __typename: 'PagesBlocksHeroActions', label?: Maybe<string>, type?: Maybe<string>, icon?: Maybe<boolean>, link?: Maybe<string> }>>>, image?: Maybe<{ __typename: 'PagesBlocksHeroImage', src?: Maybe<string>, alt?: Maybe<string> }> } | { __typename: 'PagesBlocksFeatures', color?: Maybe<string>, items?: Maybe<Array<Maybe<{ __typename: 'PagesBlocksFeaturesItems', title?: Maybe<string>, text?: Maybe<string>, icon?: Maybe<{ __typename: 'PagesBlocksFeaturesItemsIcon', color?: Maybe<string>, style?: Maybe<string>, name?: Maybe<string> }> }>>> } | { __typename: 'PagesBlocksContent', body?: Maybe<string>, color?: Maybe<string> } | { __typename: 'PagesBlocksTestimonial', quote?: Maybe<string>, author?: Maybe<string>, color?: Maybe<string> }>>> } }, getGlobalDocument: { __typename?: 'GlobalDocument', data: { __typename?: 'Global', header?: Maybe<{ __typename?: 'GlobalHeader', color?: Maybe<string>, icon?: Maybe<{ __typename?: 'GlobalHeaderIcon', name?: Maybe<string>, color?: Maybe<string>, style?: Maybe<string> }>, nav?: Maybe<Array<Maybe<{ __typename?: 'GlobalHeaderNav', href?: Maybe<string>, label?: Maybe<string> }>>> }>, footer?: Maybe<{ __typename?: 'GlobalFooter', color?: Maybe<string>, social?: Maybe<{ __typename?: 'GlobalFooterSocial', facebook?: Maybe<string>, twitter?: Maybe<string>, instagram?: Maybe<string>, github?: Maybe<string> }> }>, theme?: Maybe<{ __typename?: 'GlobalTheme', color?: Maybe<string>, icon?: Maybe<string>, font?: Maybe<string>, darkMode?: Maybe<string> }> } } };\n\nexport type BlogPostQueryQueryVariables = Exact<{\n  relativePath: Scalars['String'];\n}>;\n\n\nexport type BlogPostQueryQuery = { __typename?: 'Query', getPostsDocument: { __typename?: 'PostsDocument', data: { __typename?: 'Posts', _body?: Maybe<any>, title?: Maybe<string>, date?: Maybe<string>, heroImg?: Maybe<string>, excerpt?: Maybe<string>, author?: Maybe<{ __typename?: 'AuthorsDocument', id: string, data: { __typename?: 'Authors', name?: Maybe<string>, avatar?: Maybe<string> } }> } }, getGlobalDocument: { __typename?: 'GlobalDocument', data: { __typename?: 'Global', header?: Maybe<{ __typename?: 'GlobalHeader', color?: Maybe<string>, icon?: Maybe<{ __typename?: 'GlobalHeaderIcon', name?: Maybe<string>, color?: Maybe<string>, style?: Maybe<string> }>, nav?: Maybe<Array<Maybe<{ __typename?: 'GlobalHeaderNav', href?: Maybe<string>, label?: Maybe<string> }>>> }>, footer?: Maybe<{ __typename?: 'GlobalFooter', color?: Maybe<string>, social?: Maybe<{ __typename?: 'GlobalFooterSocial', facebook?: Maybe<string>, twitter?: Maybe<string>, instagram?: Maybe<string>, github?: Maybe<string> }> }>, theme?: Maybe<{ __typename?: 'GlobalTheme', color?: Maybe<string>, icon?: Maybe<string>, font?: Maybe<string>, darkMode?: Maybe<string> }> } } };\n\nexport type PostsPartsFragment = { __typename?: 'Posts', _body?: Maybe<any>, title?: Maybe<string>, date?: Maybe<string>, heroImg?: Maybe<string>, excerpt?: Maybe<string>, author?: Maybe<{ __typename?: 'AuthorsDocument', id: string }> };\n\nexport type GlobalPartsFragment = { __typename?: 'Global', header?: Maybe<{ __typename: 'GlobalHeader', color?: Maybe<string>, icon?: Maybe<{ __typename: 'GlobalHeaderIcon', color?: Maybe<string>, style?: Maybe<string>, name?: Maybe<string> }>, nav?: Maybe<Array<Maybe<{ __typename: 'GlobalHeaderNav', href?: Maybe<string>, label?: Maybe<string> }>>> }>, footer?: Maybe<{ __typename: 'GlobalFooter', color?: Maybe<string>, social?: Maybe<{ __typename: 'GlobalFooterSocial', facebook?: Maybe<string>, twitter?: Maybe<string>, instagram?: Maybe<string>, github?: Maybe<string> }> }>, theme?: Maybe<{ __typename: 'GlobalTheme', color?: Maybe<string>, font?: Maybe<string>, icon?: Maybe<string>, darkMode?: Maybe<string> }> };\n\nexport type AuthorsPartsFragment = { __typename?: 'Authors', name?: Maybe<string>, avatar?: Maybe<string> };\n\nexport type PagesPartsFragment = { __typename?: 'Pages', blocks?: Maybe<Array<Maybe<{ __typename: 'PagesBlocksHero', tagline?: Maybe<string>, headline?: Maybe<string>, text?: Maybe<string>, color?: Maybe<string>, actions?: Maybe<Array<Maybe<{ __typename: 'PagesBlocksHeroActions', label?: Maybe<string>, type?: Maybe<string>, icon?: Maybe<boolean>, link?: Maybe<string> }>>>, image?: Maybe<{ __typename: 'PagesBlocksHeroImage', src?: Maybe<string>, alt?: Maybe<string> }> } | { __typename: 'PagesBlocksFeatures', color?: Maybe<string>, items?: Maybe<Array<Maybe<{ __typename: 'PagesBlocksFeaturesItems', title?: Maybe<string>, text?: Maybe<string>, icon?: Maybe<{ __typename: 'PagesBlocksFeaturesItemsIcon', color?: Maybe<string>, style?: Maybe<string>, name?: Maybe<string> }> }>>> } | { __typename: 'PagesBlocksContent', body?: Maybe<string>, color?: Maybe<string> } | { __typename: 'PagesBlocksTestimonial', quote?: Maybe<string>, author?: Maybe<string>, color?: Maybe<string> }>>> };\n\nexport type GetPostsDocumentQueryVariables = Exact<{\n  relativePath: Scalars['String'];\n}>;\n\n\nexport type GetPostsDocumentQuery = { __typename?: 'Query', getPostsDocument: { __typename?: 'PostsDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Posts', _body?: Maybe<any>, title?: Maybe<string>, date?: Maybe<string>, heroImg?: Maybe<string>, excerpt?: Maybe<string>, author?: Maybe<{ __typename?: 'AuthorsDocument', id: string }> } } };\n\nexport type GetPostsListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetPostsListQuery = { __typename?: 'Query', getPostsList: { __typename?: 'PostsConnection', totalCount: number, edges?: Maybe<Array<Maybe<{ __typename?: 'PostsConnectionEdges', node?: Maybe<{ __typename?: 'PostsDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Posts', _body?: Maybe<any>, title?: Maybe<string>, date?: Maybe<string>, heroImg?: Maybe<string>, excerpt?: Maybe<string>, author?: Maybe<{ __typename?: 'AuthorsDocument', id: string }> } }> }>>> } };\n\nexport type GetGlobalDocumentQueryVariables = Exact<{\n  relativePath: Scalars['String'];\n}>;\n\n\nexport type GetGlobalDocumentQuery = { __typename?: 'Query', getGlobalDocument: { __typename?: 'GlobalDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Global', header?: Maybe<{ __typename: 'GlobalHeader', color?: Maybe<string>, icon?: Maybe<{ __typename: 'GlobalHeaderIcon', color?: Maybe<string>, style?: Maybe<string>, name?: Maybe<string> }>, nav?: Maybe<Array<Maybe<{ __typename: 'GlobalHeaderNav', href?: Maybe<string>, label?: Maybe<string> }>>> }>, footer?: Maybe<{ __typename: 'GlobalFooter', color?: Maybe<string>, social?: Maybe<{ __typename: 'GlobalFooterSocial', facebook?: Maybe<string>, twitter?: Maybe<string>, instagram?: Maybe<string>, github?: Maybe<string> }> }>, theme?: Maybe<{ __typename: 'GlobalTheme', color?: Maybe<string>, font?: Maybe<string>, icon?: Maybe<string>, darkMode?: Maybe<string> }> } } };\n\nexport type GetGlobalListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetGlobalListQuery = { __typename?: 'Query', getGlobalList: { __typename?: 'GlobalConnection', totalCount: number, edges?: Maybe<Array<Maybe<{ __typename?: 'GlobalConnectionEdges', node?: Maybe<{ __typename?: 'GlobalDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Global', header?: Maybe<{ __typename: 'GlobalHeader', color?: Maybe<string>, icon?: Maybe<{ __typename: 'GlobalHeaderIcon', color?: Maybe<string>, style?: Maybe<string>, name?: Maybe<string> }>, nav?: Maybe<Array<Maybe<{ __typename: 'GlobalHeaderNav', href?: Maybe<string>, label?: Maybe<string> }>>> }>, footer?: Maybe<{ __typename: 'GlobalFooter', color?: Maybe<string>, social?: Maybe<{ __typename: 'GlobalFooterSocial', facebook?: Maybe<string>, twitter?: Maybe<string>, instagram?: Maybe<string>, github?: Maybe<string> }> }>, theme?: Maybe<{ __typename: 'GlobalTheme', color?: Maybe<string>, font?: Maybe<string>, icon?: Maybe<string>, darkMode?: Maybe<string> }> } }> }>>> } };\n\nexport type GetAuthorsDocumentQueryVariables = Exact<{\n  relativePath: Scalars['String'];\n}>;\n\n\nexport type GetAuthorsDocumentQuery = { __typename?: 'Query', getAuthorsDocument: { __typename?: 'AuthorsDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Authors', name?: Maybe<string>, avatar?: Maybe<string> } } };\n\nexport type GetAuthorsListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAuthorsListQuery = { __typename?: 'Query', getAuthorsList: { __typename?: 'AuthorsConnection', totalCount: number, edges?: Maybe<Array<Maybe<{ __typename?: 'AuthorsConnectionEdges', node?: Maybe<{ __typename?: 'AuthorsDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Authors', name?: Maybe<string>, avatar?: Maybe<string> } }> }>>> } };\n\nexport type GetPagesDocumentQueryVariables = Exact<{\n  relativePath: Scalars['String'];\n}>;\n\n\nexport type GetPagesDocumentQuery = { __typename?: 'Query', getPagesDocument: { __typename?: 'PagesDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Pages', blocks?: Maybe<Array<Maybe<{ __typename: 'PagesBlocksHero', tagline?: Maybe<string>, headline?: Maybe<string>, text?: Maybe<string>, color?: Maybe<string>, actions?: Maybe<Array<Maybe<{ __typename: 'PagesBlocksHeroActions', label?: Maybe<string>, type?: Maybe<string>, icon?: Maybe<boolean>, link?: Maybe<string> }>>>, image?: Maybe<{ __typename: 'PagesBlocksHeroImage', src?: Maybe<string>, alt?: Maybe<string> }> } | { __typename: 'PagesBlocksFeatures', color?: Maybe<string>, items?: Maybe<Array<Maybe<{ __typename: 'PagesBlocksFeaturesItems', title?: Maybe<string>, text?: Maybe<string>, icon?: Maybe<{ __typename: 'PagesBlocksFeaturesItemsIcon', color?: Maybe<string>, style?: Maybe<string>, name?: Maybe<string> }> }>>> } | { __typename: 'PagesBlocksContent', body?: Maybe<string>, color?: Maybe<string> } | { __typename: 'PagesBlocksTestimonial', quote?: Maybe<string>, author?: Maybe<string>, color?: Maybe<string> }>>> } } };\n\nexport type GetPagesListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetPagesListQuery = { __typename?: 'Query', getPagesList: { __typename?: 'PagesConnection', totalCount: number, edges?: Maybe<Array<Maybe<{ __typename?: 'PagesConnectionEdges', node?: Maybe<{ __typename?: 'PagesDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Pages', blocks?: Maybe<Array<Maybe<{ __typename: 'PagesBlocksHero', tagline?: Maybe<string>, headline?: Maybe<string>, text?: Maybe<string>, color?: Maybe<string>, actions?: Maybe<Array<Maybe<{ __typename: 'PagesBlocksHeroActions', label?: Maybe<string>, type?: Maybe<string>, icon?: Maybe<boolean>, link?: Maybe<string> }>>>, image?: Maybe<{ __typename: 'PagesBlocksHeroImage', src?: Maybe<string>, alt?: Maybe<string> }> } | { __typename: 'PagesBlocksFeatures', color?: Maybe<string>, items?: Maybe<Array<Maybe<{ __typename: 'PagesBlocksFeaturesItems', title?: Maybe<string>, text?: Maybe<string>, icon?: Maybe<{ __typename: 'PagesBlocksFeaturesItemsIcon', color?: Maybe<string>, style?: Maybe<string>, name?: Maybe<string> }> }>>> } | { __typename: 'PagesBlocksContent', body?: Maybe<string>, color?: Maybe<string> } | { __typename: 'PagesBlocksTestimonial', quote?: Maybe<string>, author?: Maybe<string>, color?: Maybe<string> }>>> } }> }>>> } };\n\nexport const LayoutQueryFragmentFragmentDoc = gql`\n    fragment LayoutQueryFragment on Query {\n  getGlobalDocument(relativePath: \"index.json\") {\n    data {\n      header {\n        icon {\n          name\n          color\n          style\n        }\n        color\n        nav {\n          href\n          label\n        }\n      }\n      footer {\n        color\n        social {\n          facebook\n          twitter\n          instagram\n          github\n        }\n      }\n      theme {\n        color\n        icon\n        font\n        darkMode\n      }\n    }\n  }\n}\n    `;\nexport const PostsPartsFragmentDoc = gql`\n    fragment PostsParts on Posts {\n  _body\n  title\n  author {\n    ... on Document {\n      id\n    }\n  }\n  date\n  heroImg\n  excerpt\n}\n    `;\nexport const GlobalPartsFragmentDoc = gql`\n    fragment GlobalParts on Global {\n  header {\n    __typename\n    icon {\n      __typename\n      color\n      style\n      name\n    }\n    color\n    nav {\n      __typename\n      href\n      label\n    }\n  }\n  footer {\n    __typename\n    color\n    social {\n      __typename\n      facebook\n      twitter\n      instagram\n      github\n    }\n  }\n  theme {\n    __typename\n    color\n    font\n    icon\n    darkMode\n  }\n}\n    `;\nexport const AuthorsPartsFragmentDoc = gql`\n    fragment AuthorsParts on Authors {\n  name\n  avatar\n}\n    `;\nexport const PagesPartsFragmentDoc = gql`\n    fragment PagesParts on Pages {\n  blocks {\n    __typename\n    ... on PagesBlocksHero {\n      tagline\n      headline\n      text\n      actions {\n        __typename\n        label\n        type\n        icon\n        link\n      }\n      image {\n        __typename\n        src\n        alt\n      }\n      color\n    }\n    ... on PagesBlocksFeatures {\n      items {\n        __typename\n        icon {\n          __typename\n          color\n          style\n          name\n        }\n        title\n        text\n      }\n      color\n    }\n    ... on PagesBlocksContent {\n      body\n      color\n    }\n    ... on PagesBlocksTestimonial {\n      quote\n      author\n      color\n    }\n  }\n}\n    `;\nexport const PageQueryDocument = gql`\n    query PageQuery {\n  ...LayoutQueryFragment\n  getPostsList {\n    edges {\n      node {\n        id\n        values\n        data {\n          author {\n            ... on AuthorsDocument {\n              data {\n                ...AuthorsParts\n              }\n            }\n          }\n        }\n        sys {\n          filename\n        }\n      }\n    }\n  }\n}\n    ${LayoutQueryFragmentFragmentDoc}\n${AuthorsPartsFragmentDoc}`;\nexport const ContentQueryDocument = gql`\n    query ContentQuery($relativePath: String!) {\n  ...LayoutQueryFragment\n  getPagesDocument(relativePath: $relativePath) {\n    data {\n      ...PagesParts\n    }\n  }\n}\n    ${LayoutQueryFragmentFragmentDoc}\n${PagesPartsFragmentDoc}`;\nexport const BlogPostQueryDocument = gql`\n    query BlogPostQuery($relativePath: String!) {\n  ...LayoutQueryFragment\n  getPostsDocument(relativePath: $relativePath) {\n    data {\n      ...PostsParts\n      author {\n        ... on AuthorsDocument {\n          data {\n            name\n            avatar\n          }\n        }\n      }\n    }\n  }\n}\n    ${LayoutQueryFragmentFragmentDoc}\n${PostsPartsFragmentDoc}`;\nexport const GetPostsDocumentDocument = gql`\n    query getPostsDocument($relativePath: String!) {\n  getPostsDocument(relativePath: $relativePath) {\n    sys {\n      filename\n      basename\n      breadcrumbs\n      path\n      relativePath\n      extension\n    }\n    id\n    data {\n      ...PostsParts\n    }\n  }\n}\n    ${PostsPartsFragmentDoc}`;\nexport const GetPostsListDocument = gql`\n    query getPostsList {\n  getPostsList {\n    totalCount\n    edges {\n      node {\n        id\n        sys {\n          filename\n          basename\n          breadcrumbs\n          path\n          relativePath\n          extension\n        }\n        data {\n          ...PostsParts\n        }\n      }\n    }\n  }\n}\n    ${PostsPartsFragmentDoc}`;\nexport const GetGlobalDocumentDocument = gql`\n    query getGlobalDocument($relativePath: String!) {\n  getGlobalDocument(relativePath: $relativePath) {\n    sys {\n      filename\n      basename\n      breadcrumbs\n      path\n      relativePath\n      extension\n    }\n    id\n    data {\n      ...GlobalParts\n    }\n  }\n}\n    ${GlobalPartsFragmentDoc}`;\nexport const GetGlobalListDocument = gql`\n    query getGlobalList {\n  getGlobalList {\n    totalCount\n    edges {\n      node {\n        id\n        sys {\n          filename\n          basename\n          breadcrumbs\n          path\n          relativePath\n          extension\n        }\n        data {\n          ...GlobalParts\n        }\n      }\n    }\n  }\n}\n    ${GlobalPartsFragmentDoc}`;\nexport const GetAuthorsDocumentDocument = gql`\n    query getAuthorsDocument($relativePath: String!) {\n  getAuthorsDocument(relativePath: $relativePath) {\n    sys {\n      filename\n      basename\n      breadcrumbs\n      path\n      relativePath\n      extension\n    }\n    id\n    data {\n      ...AuthorsParts\n    }\n  }\n}\n    ${AuthorsPartsFragmentDoc}`;\nexport const GetAuthorsListDocument = gql`\n    query getAuthorsList {\n  getAuthorsList {\n    totalCount\n    edges {\n      node {\n        id\n        sys {\n          filename\n          basename\n          breadcrumbs\n          path\n          relativePath\n          extension\n        }\n        data {\n          ...AuthorsParts\n        }\n      }\n    }\n  }\n}\n    ${AuthorsPartsFragmentDoc}`;\nexport const GetPagesDocumentDocument = gql`\n    query getPagesDocument($relativePath: String!) {\n  getPagesDocument(relativePath: $relativePath) {\n    sys {\n      filename\n      basename\n      breadcrumbs\n      path\n      relativePath\n      extension\n    }\n    id\n    data {\n      ...PagesParts\n    }\n  }\n}\n    ${PagesPartsFragmentDoc}`;\nexport const GetPagesListDocument = gql`\n    query getPagesList {\n  getPagesList {\n    totalCount\n    edges {\n      node {\n        id\n        sys {\n          filename\n          basename\n          breadcrumbs\n          path\n          relativePath\n          extension\n        }\n        data {\n          ...PagesParts\n        }\n      }\n    }\n  }\n}\n    ${PagesPartsFragmentDoc}`;\nexport type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>\n  export function getSdk<C>(requester: Requester<C>) {\n    return {\n      PageQuery(variables?: PageQueryQueryVariables, options?: C): Promise<{data: PageQueryQuery, variables: PageQueryQueryVariables, query: string}> {\n        return requester<{data: PageQueryQuery, variables: PageQueryQueryVariables, query: string}, PageQueryQueryVariables>(PageQueryDocument, variables, options);\n      },\n    ContentQuery(variables: ContentQueryQueryVariables, options?: C): Promise<{data: ContentQueryQuery, variables: ContentQueryQueryVariables, query: string}> {\n        return requester<{data: ContentQueryQuery, variables: ContentQueryQueryVariables, query: string}, ContentQueryQueryVariables>(ContentQueryDocument, variables, options);\n      },\n    BlogPostQuery(variables: BlogPostQueryQueryVariables, options?: C): Promise<{data: BlogPostQueryQuery, variables: BlogPostQueryQueryVariables, query: string}> {\n        return requester<{data: BlogPostQueryQuery, variables: BlogPostQueryQueryVariables, query: string}, BlogPostQueryQueryVariables>(BlogPostQueryDocument, variables, options);\n      },\n    getPostsDocument(variables: GetPostsDocumentQueryVariables, options?: C): Promise<{data: GetPostsDocumentQuery, variables: GetPostsDocumentQueryVariables, query: string}> {\n        return requester<{data: GetPostsDocumentQuery, variables: GetPostsDocumentQueryVariables, query: string}, GetPostsDocumentQueryVariables>(GetPostsDocumentDocument, variables, options);\n      },\n    getPostsList(variables?: GetPostsListQueryVariables, options?: C): Promise<{data: GetPostsListQuery, variables: GetPostsListQueryVariables, query: string}> {\n        return requester<{data: GetPostsListQuery, variables: GetPostsListQueryVariables, query: string}, GetPostsListQueryVariables>(GetPostsListDocument, variables, options);\n      },\n    getGlobalDocument(variables: GetGlobalDocumentQueryVariables, options?: C): Promise<{data: GetGlobalDocumentQuery, variables: GetGlobalDocumentQueryVariables, query: string}> {\n        return requester<{data: GetGlobalDocumentQuery, variables: GetGlobalDocumentQueryVariables, query: string}, GetGlobalDocumentQueryVariables>(GetGlobalDocumentDocument, variables, options);\n      },\n    getGlobalList(variables?: GetGlobalListQueryVariables, options?: C): Promise<{data: GetGlobalListQuery, variables: GetGlobalListQueryVariables, query: string}> {\n        return requester<{data: GetGlobalListQuery, variables: GetGlobalListQueryVariables, query: string}, GetGlobalListQueryVariables>(GetGlobalListDocument, variables, options);\n      },\n    getAuthorsDocument(variables: GetAuthorsDocumentQueryVariables, options?: C): Promise<{data: GetAuthorsDocumentQuery, variables: GetAuthorsDocumentQueryVariables, query: string}> {\n        return requester<{data: GetAuthorsDocumentQuery, variables: GetAuthorsDocumentQueryVariables, query: string}, GetAuthorsDocumentQueryVariables>(GetAuthorsDocumentDocument, variables, options);\n      },\n    getAuthorsList(variables?: GetAuthorsListQueryVariables, options?: C): Promise<{data: GetAuthorsListQuery, variables: GetAuthorsListQueryVariables, query: string}> {\n        return requester<{data: GetAuthorsListQuery, variables: GetAuthorsListQueryVariables, query: string}, GetAuthorsListQueryVariables>(GetAuthorsListDocument, variables, options);\n      },\n    getPagesDocument(variables: GetPagesDocumentQueryVariables, options?: C): Promise<{data: GetPagesDocumentQuery, variables: GetPagesDocumentQueryVariables, query: string}> {\n        return requester<{data: GetPagesDocumentQuery, variables: GetPagesDocumentQueryVariables, query: string}, GetPagesDocumentQueryVariables>(GetPagesDocumentDocument, variables, options);\n      },\n    getPagesList(variables?: GetPagesListQueryVariables, options?: C): Promise<{data: GetPagesListQuery, variables: GetPagesListQueryVariables, query: string}> {\n        return requester<{data: GetPagesListQuery, variables: GetPagesListQueryVariables, query: string}, GetPagesListQueryVariables>(GetPagesListDocument, variables, options);\n      }\n    };\n  }\n  export type Sdk = ReturnType<typeof getSdk>;\n\n// TinaSDK generated code\nimport { getStaticPropsForTina } from 'tinacms'\nconst requester: (doc: any, vars?: any, options?: any) => Promise<any> = async (\n  doc,\n  vars,\n  _options\n) => {\n  // const data = await tinaClient.request(doc, { variables: vars }); \n  const res = await await getStaticPropsForTina({query: doc, variables: vars})\n  return res\n};\n\n/**\n * @experimental this class can be used but may change in the future\n **/\nexport const ExperimentalGetTinaClient = ()=>getSdk(requester)\n\n"]},"metadata":{},"sourceType":"module"}