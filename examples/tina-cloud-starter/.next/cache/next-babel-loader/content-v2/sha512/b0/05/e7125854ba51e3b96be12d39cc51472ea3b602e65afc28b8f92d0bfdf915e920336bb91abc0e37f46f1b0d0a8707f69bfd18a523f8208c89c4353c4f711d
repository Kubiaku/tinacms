{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jeffsee/code/tinacms/examples/tina-cloud-starter/components/theme.tsx\";\nimport * as React from \"react\";\nimport GlobalData from \"../content/global/index.json\";\nexport const ThemeContext = /*#__PURE__*/React.createContext(GlobalData.theme);\n\nconst updateRenderColorMode = themeMode => {\n  if (false) {\n    const root = window.document.documentElement;\n    root.classList.remove(\"dark\");\n    root.classList.remove(\"light\");\n    root.classList.add(themeMode);\n  }\n};\n\nconst getUserSystemDarkMode = () => {\n  if (false) {\n    const userMedia = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n    if (userMedia.matches) {\n      return \"dark\";\n    }\n  }\n\n  return \"light\";\n};\n\nexport const Theme = ({\n  data,\n  children\n}) => {\n  const [systemDarkMode, setSystemDarkMode] = React.useState(getUserSystemDarkMode());\n  React.useEffect(() => {\n    if (false) {\n      const userMedia = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n      const updateSystemMediaPreference = event => {\n        setSystemDarkMode(event.matches ? \"dark\" : \"light\");\n      };\n\n      userMedia.addEventListener(\"change\", updateSystemMediaPreference);\n      return () => userMedia.removeEventListener(\"change\", updateSystemMediaPreference);\n    }\n\n    return;\n  }, [setSystemDarkMode]);\n  const {\n    color = \"blue\",\n    icon = \"boxicon\",\n    font = \"sans\",\n    darkMode = \"system\"\n  } = data;\n  React.useEffect(() => {\n    updateRenderColorMode(darkMode === \"system\" ? systemDarkMode : darkMode !== \"\" ? darkMode : \"light\");\n  }, [systemDarkMode, darkMode]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      color,\n      icon,\n      font,\n      darkMode\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/Users/jeffsee/code/tinacms/examples/tina-cloud-starter/components/theme.tsx"],"names":["React","GlobalData","ThemeContext","createContext","theme","updateRenderColorMode","themeMode","root","window","document","documentElement","classList","remove","add","getUserSystemDarkMode","userMedia","matchMedia","matches","Theme","data","children","systemDarkMode","setSystemDarkMode","useState","useEffect","updateSystemMediaPreference","event","addEventListener","removeEventListener","color","icon","font","darkMode"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AAEA,OAAO,MAAMC,YAAY,gBAAGF,KAAK,CAACG,aAAN,CAAoBF,UAAU,CAACG,KAA/B,CAArB;;AAEP,MAAMC,qBAAqB,GAAIC,SAAD,IAAiC;AAC7D,aAAmC;AACjC,UAAMC,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBC,eAA7B;AACAH,IAAAA,IAAI,CAACI,SAAL,CAAeC,MAAf,CAAsB,MAAtB;AACAL,IAAAA,IAAI,CAACI,SAAL,CAAeC,MAAf,CAAsB,OAAtB;AACAL,IAAAA,IAAI,CAACI,SAAL,CAAeE,GAAf,CAAmBP,SAAnB;AACD;AACF,CAPD;;AASA,MAAMQ,qBAAqB,GAAG,MAAM;AAClC,aAAmC;AACjC,UAAMC,SAAS,GAAGP,MAAM,CAACQ,UAAP,CAAkB,8BAAlB,CAAlB;;AAEA,QAAID,SAAS,CAACE,OAAd,EAAuB;AACrB,aAAO,MAAP;AACD;AACF;;AAED,SAAO,OAAP;AACD,CAVD;;AAYA,OAAO,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAwB;AAC3C,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCtB,KAAK,CAACuB,QAAN,CAC1CT,qBAAqB,EADqB,CAA5C;AAIAd,EAAAA,KAAK,CAACwB,SAAN,CAAgB,MAAM;AACpB,eAAmC;AACjC,YAAMT,SAAS,GAAGP,MAAM,CAACQ,UAAP,CAAkB,8BAAlB,CAAlB;;AAEA,YAAMS,2BAA2B,GAAIC,KAAD,IAAW;AAC7CJ,QAAAA,iBAAiB,CAACI,KAAK,CAACT,OAAN,GAAgB,MAAhB,GAAyB,OAA1B,CAAjB;AACD,OAFD;;AAIAF,MAAAA,SAAS,CAACY,gBAAV,CAA2B,QAA3B,EAAqCF,2BAArC;AAEA,aAAO,MACLV,SAAS,CAACa,mBAAV,CAA8B,QAA9B,EAAwCH,2BAAxC,CADF;AAED;;AACD;AACD,GAdD,EAcG,CAACH,iBAAD,CAdH;AAgBA,QAAM;AACJO,IAAAA,KAAK,GAAG,MADJ;AAEJC,IAAAA,IAAI,GAAG,SAFH;AAGJC,IAAAA,IAAI,GAAG,MAHH;AAIJC,IAAAA,QAAQ,GAAG;AAJP,MAKFb,IALJ;AAOAnB,EAAAA,KAAK,CAACwB,SAAN,CAAgB,MAAM;AACpBnB,IAAAA,qBAAqB,CACnB2B,QAAQ,KAAK,QAAb,GACIX,cADJ,GAEIW,QAAQ,KAAK,EAAb,GACAA,QADA,GAEA,OALe,CAArB;AAOD,GARD,EAQG,CAACX,cAAD,EAAiBW,QAAjB,CARH;AAUA,sBACE,QAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLH,MAAAA,KADK;AAELC,MAAAA,IAFK;AAGLC,MAAAA,IAHK;AAILC,MAAAA;AAJK,KADT;AAAA,cAQGZ;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAlDM","sourcesContent":["import * as React from \"react\";\nimport GlobalData from \"../content/global/index.json\";\n\nexport const ThemeContext = React.createContext(GlobalData.theme);\n\nconst updateRenderColorMode = (themeMode: \"dark\" | \"light\") => {\n  if (typeof window !== \"undefined\") {\n    const root = window.document.documentElement;\n    root.classList.remove(\"dark\");\n    root.classList.remove(\"light\");\n    root.classList.add(themeMode);\n  }\n};\n\nconst getUserSystemDarkMode = () => {\n  if (typeof window !== \"undefined\") {\n    const userMedia = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n    if (userMedia.matches) {\n      return \"dark\";\n    }\n  }\n\n  return \"light\";\n};\n\nexport const Theme = ({ data, children }) => {\n  const [systemDarkMode, setSystemDarkMode] = React.useState(\n    getUserSystemDarkMode()\n  );\n\n  React.useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      const userMedia = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n      const updateSystemMediaPreference = (event) => {\n        setSystemDarkMode(event.matches ? \"dark\" : \"light\");\n      };\n\n      userMedia.addEventListener(\"change\", updateSystemMediaPreference);\n\n      return () =>\n        userMedia.removeEventListener(\"change\", updateSystemMediaPreference);\n    }\n    return;\n  }, [setSystemDarkMode]);\n\n  const {\n    color = \"blue\",\n    icon = \"boxicon\",\n    font = \"sans\",\n    darkMode = \"system\",\n  } = data;\n\n  React.useEffect(() => {\n    updateRenderColorMode(\n      darkMode === \"system\"\n        ? systemDarkMode\n        : darkMode !== \"\"\n        ? darkMode\n        : \"light\"\n    );\n  }, [systemDarkMode, darkMode]);\n\n  return (\n    <ThemeContext.Provider\n      value={{\n        color,\n        icon,\n        font,\n        darkMode,\n      }}\n    >\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}