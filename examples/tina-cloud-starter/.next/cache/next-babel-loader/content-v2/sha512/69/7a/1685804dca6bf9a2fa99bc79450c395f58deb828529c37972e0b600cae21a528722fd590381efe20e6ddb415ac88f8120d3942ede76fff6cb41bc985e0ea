{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/jeffsee/code/tinacms/.yarn/cache/@babel-runtime-npm-7.12.5-b3edb8ee8e-423fb00793.zip/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/jeffsee/code/tinacms/examples/tina-cloud-starter/components/theme.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport GlobalData from \"../content/global/index.json\";\nexport var ThemeContext = /*#__PURE__*/React.createContext(GlobalData.theme);\n\nvar updateRenderColorMode = function updateRenderColorMode(themeMode) {\n  if (true) {\n    var root = window.document.documentElement;\n    root.classList.remove(\"dark\");\n    root.classList.remove(\"light\");\n    root.classList.add(themeMode);\n  }\n};\n\nvar getUserSystemDarkMode = function getUserSystemDarkMode() {\n  if (true) {\n    var userMedia = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n    if (userMedia.matches) {\n      return \"dark\";\n    }\n  }\n\n  return \"light\";\n};\n\nexport var Theme = function Theme(_ref) {\n  _s();\n\n  var data = _ref.data,\n      children = _ref.children;\n\n  var _React$useState = React.useState(getUserSystemDarkMode()),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      systemDarkMode = _React$useState2[0],\n      setSystemDarkMode = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (true) {\n      var userMedia = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n      var updateSystemMediaPreference = function updateSystemMediaPreference(event) {\n        setSystemDarkMode(event.matches ? \"dark\" : \"light\");\n      };\n\n      userMedia.addEventListener(\"change\", updateSystemMediaPreference);\n      return function () {\n        return userMedia.removeEventListener(\"change\", updateSystemMediaPreference);\n      };\n    }\n\n    return;\n  }, [setSystemDarkMode]);\n  var _data$color = data.color,\n      color = _data$color === void 0 ? \"blue\" : _data$color,\n      _data$icon = data.icon,\n      icon = _data$icon === void 0 ? \"boxicon\" : _data$icon,\n      _data$font = data.font,\n      font = _data$font === void 0 ? \"sans\" : _data$font,\n      _data$darkMode = data.darkMode,\n      darkMode = _data$darkMode === void 0 ? \"system\" : _data$darkMode;\n  React.useEffect(function () {\n    updateRenderColorMode(darkMode === \"system\" ? systemDarkMode : darkMode !== \"\" ? darkMode : \"light\");\n  }, [systemDarkMode, darkMode]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      color: color,\n      icon: icon,\n      font: font,\n      darkMode: darkMode\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Theme, \"Lh41hLl+1mVD6Ln7c1bZcCiyM4A=\");\n\n_c = Theme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Theme\");","map":{"version":3,"sources":["/Users/jeffsee/code/tinacms/examples/tina-cloud-starter/components/theme.tsx"],"names":["React","GlobalData","ThemeContext","createContext","theme","updateRenderColorMode","themeMode","root","window","document","documentElement","classList","remove","add","getUserSystemDarkMode","userMedia","matchMedia","matches","Theme","data","children","useState","systemDarkMode","setSystemDarkMode","useEffect","updateSystemMediaPreference","event","addEventListener","removeEventListener","color","icon","font","darkMode"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AAEA,OAAO,IAAMC,YAAY,gBAAGF,KAAK,CAACG,aAAN,CAAoBF,UAAU,CAACG,KAA/B,CAArB;;AAEP,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,SAAD,EAAiC;AAC7D,YAAmC;AACjC,QAAMC,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBC,eAA7B;AACAH,IAAAA,IAAI,CAACI,SAAL,CAAeC,MAAf,CAAsB,MAAtB;AACAL,IAAAA,IAAI,CAACI,SAAL,CAAeC,MAAf,CAAsB,OAAtB;AACAL,IAAAA,IAAI,CAACI,SAAL,CAAeE,GAAf,CAAmBP,SAAnB;AACD;AACF,CAPD;;AASA,IAAMQ,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAClC,YAAmC;AACjC,QAAMC,SAAS,GAAGP,MAAM,CAACQ,UAAP,CAAkB,8BAAlB,CAAlB;;AAEA,QAAID,SAAS,CAACE,OAAd,EAAuB;AACrB,aAAO,MAAP;AACD;AACF;;AAED,SAAO,OAAP;AACD,CAVD;;AAYA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAAwB;AAAA;;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,wBACCpB,KAAK,CAACqB,QAAN,CAC1CP,qBAAqB,EADqB,CADD;AAAA;AAAA,MACpCQ,cADoC;AAAA,MACpBC,iBADoB;;AAK3CvB,EAAAA,KAAK,CAACwB,SAAN,CAAgB,YAAM;AACpB,cAAmC;AACjC,UAAMT,SAAS,GAAGP,MAAM,CAACQ,UAAP,CAAkB,8BAAlB,CAAlB;;AAEA,UAAMS,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACC,KAAD,EAAW;AAC7CH,QAAAA,iBAAiB,CAACG,KAAK,CAACT,OAAN,GAAgB,MAAhB,GAAyB,OAA1B,CAAjB;AACD,OAFD;;AAIAF,MAAAA,SAAS,CAACY,gBAAV,CAA2B,QAA3B,EAAqCF,2BAArC;AAEA,aAAO;AAAA,eACLV,SAAS,CAACa,mBAAV,CAA8B,QAA9B,EAAwCH,2BAAxC,CADK;AAAA,OAAP;AAED;;AACD;AACD,GAdD,EAcG,CAACF,iBAAD,CAdH;AAL2C,oBA0BvCJ,IA1BuC,CAsBzCU,KAtByC;AAAA,MAsBzCA,KAtByC,4BAsBjC,MAtBiC;AAAA,mBA0BvCV,IA1BuC,CAuBzCW,IAvByC;AAAA,MAuBzCA,IAvByC,2BAuBlC,SAvBkC;AAAA,mBA0BvCX,IA1BuC,CAwBzCY,IAxByC;AAAA,MAwBzCA,IAxByC,2BAwBlC,MAxBkC;AAAA,uBA0BvCZ,IA1BuC,CAyBzCa,QAzByC;AAAA,MAyBzCA,QAzByC,+BAyB9B,QAzB8B;AA4B3ChC,EAAAA,KAAK,CAACwB,SAAN,CAAgB,YAAM;AACpBnB,IAAAA,qBAAqB,CACnB2B,QAAQ,KAAK,QAAb,GACIV,cADJ,GAEIU,QAAQ,KAAK,EAAb,GACAA,QADA,GAEA,OALe,CAArB;AAOD,GARD,EAQG,CAACV,cAAD,EAAiBU,QAAjB,CARH;AAUA,sBACE,QAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLH,MAAAA,KAAK,EAALA,KADK;AAELC,MAAAA,IAAI,EAAJA,IAFK;AAGLC,MAAAA,IAAI,EAAJA,IAHK;AAILC,MAAAA,QAAQ,EAARA;AAJK,KADT;AAAA,cAQGZ;AARH;AAAA;AAAA;AAAA;AAAA,WADF;AAYD,CAlDM;;GAAMF,K;;KAAAA,K","sourcesContent":["import * as React from \"react\";\nimport GlobalData from \"../content/global/index.json\";\n\nexport const ThemeContext = React.createContext(GlobalData.theme);\n\nconst updateRenderColorMode = (themeMode: \"dark\" | \"light\") => {\n  if (typeof window !== \"undefined\") {\n    const root = window.document.documentElement;\n    root.classList.remove(\"dark\");\n    root.classList.remove(\"light\");\n    root.classList.add(themeMode);\n  }\n};\n\nconst getUserSystemDarkMode = () => {\n  if (typeof window !== \"undefined\") {\n    const userMedia = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n    if (userMedia.matches) {\n      return \"dark\";\n    }\n  }\n\n  return \"light\";\n};\n\nexport const Theme = ({ data, children }) => {\n  const [systemDarkMode, setSystemDarkMode] = React.useState(\n    getUserSystemDarkMode()\n  );\n\n  React.useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      const userMedia = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n      const updateSystemMediaPreference = (event) => {\n        setSystemDarkMode(event.matches ? \"dark\" : \"light\");\n      };\n\n      userMedia.addEventListener(\"change\", updateSystemMediaPreference);\n\n      return () =>\n        userMedia.removeEventListener(\"change\", updateSystemMediaPreference);\n    }\n    return;\n  }, [setSystemDarkMode]);\n\n  const {\n    color = \"blue\",\n    icon = \"boxicon\",\n    font = \"sans\",\n    darkMode = \"system\",\n  } = data;\n\n  React.useEffect(() => {\n    updateRenderColorMode(\n      darkMode === \"system\"\n        ? systemDarkMode\n        : darkMode !== \"\"\n        ? darkMode\n        : \"light\"\n    );\n  }, [systemDarkMode, darkMode]);\n\n  return (\n    <ThemeContext.Provider\n      value={{\n        color,\n        icon,\n        font,\n        darkMode,\n      }}\n    >\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}